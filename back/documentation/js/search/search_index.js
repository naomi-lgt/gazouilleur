var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.526,1,2.186]],["body/controllers/AppController.html",[0,2.178,1,3.12,2,1.781,3,0.331,4,0.291,5,0.291,6,3.007,7,0.555,8,1.865,9,2.444,10,3.99,11,3.577,12,1.304,13,0.029,14,3.577,15,4.77,16,3.12,17,4.77,18,3.12,19,3.12,20,1.493,21,3.577,22,4.747,23,2.823,24,3.12,25,0.88,26,3.007,27,3.12,28,2.575,29,2.013,30,3.577,31,0.774,32,3.577,33,1.045,34,0.901,35,0.901,36,4.747,37,1.304,38,2.127,39,0.547,40,2.575,41,2.351,42,2.351,43,2.351,44,0.774,45,2.632,46,1.781,47,3.12,48,2.351,49,3.12,50,3.12,51,1.941,52,2.652,53,3.577,54,1.607,55,3.577,56,0.331,57,0.068,58,2.127,59,2.351,60,3.577,61,2.351,62,2.351,63,2.178,64,3.577,65,3.577,66,1.406,67,3.577,68,0.02,69,0.02]],["title/modules/AppModule.html",[70,1.307,71,2.186]],["body/modules/AppModule.html",[1,3.506,2,2.367,3,0.332,4,0.292,5,0.292,9,1.646,13,0.029,39,0.582,44,0.776,56,0.332,57,0.069,68,0.02,69,0.02,70,1.868,71,4.227,72,1.646,73,2.182,74,3.015,75,3.015,76,3.612,77,3.612,78,3.024,79,2.58,80,1.946,81,1.946,82,2.639,83,3.172,84,4.755,85,5.334,86,3.015,87,2.639,88,1.128,89,2.639,90,3.587,91,3.587,92,3.587,93,3.587,94,3.587,95,1.214,96,3.498,97,0.838,98,3.015,99,3.587,100,3.587,101,3.587,102,3.587,103,3.587,104,3.587,105,3.587,106,3.587,107,3.587,108,3.587,109,3.587,110,3.587,111,1.521]],["title/modules/AuthModule.html",[70,1.307,112,1.978]],["body/modules/AuthModule.html",[3,0.322,4,0.283,5,0.283,13,0.029,20,1.465,28,1.887,39,0.569,44,0.752,46,1.732,52,3.234,56,0.322,57,0.067,68,0.02,69,0.02,70,1.831,72,1.596,73,2.138,78,2.998,79,2.528,80,1.887,81,1.887,83,2.771,112,3.886,113,2.924,114,3.479,115,2.924,116,2.924,117,3.581,118,3.581,119,3.479,120,3.428,121,3.428,122,2.924,123,4.659,124,3.479,125,3.479,126,2.559,127,3.479,128,2.924,129,3.479,130,3.917,131,2.924,132,3.479,133,3.479,134,3.479,135,3.479,136,3.479,137,3.479,138,3.479,139,2.924,140,3.479,141,3.479,142,3.479,143,3.479,144,3.479,145,3.479,146,2.924,147,3.479,148,2.559]],["title/injectables/AuthService.html",[52,1.656,149,0.613]],["body/injectables/AuthService.html",[3,0.273,4,0.24,5,0.24,7,0.457,8,1.633,9,2.626,10,3.494,13,0.029,15,2.477,20,1.735,23,1.752,25,0.747,28,1.599,31,1.041,33,1.407,34,1.213,35,1.213,37,1.515,38,1.752,39,0.511,44,0.637,52,2.069,54,1.991,56,0.273,57,0.056,66,1.892,68,0.018,69,0.018,95,1.771,97,1.337,126,2.168,146,2.477,149,0.766,150,1.158,151,2.477,152,4.815,153,1.763,154,2.946,155,2.626,156,5.881,157,2.946,158,4.156,159,2.946,160,2.946,161,3.625,162,2.946,163,1.892,164,2.472,165,2.732,166,2.168,167,2.946,168,2.946,169,2.946,170,2.168,171,2.946,172,2.946,173,2.946,174,2.732,175,2.946,176,2.946,177,2.946,178,2.946,179,2.946,180,2.946,181,2.168,182,2.946,183,2.946,184,4.156,185,2.472,186,2.477,187,2.946,188,1.63,189,2.477,190,2.477,191,2.946,192,2.946,193,2.946,194,2.946,195,4.156,196,2.946,197,4.156,198,1.937,199,2.946,200,2.946,201,1.599,202,2.946,203,1.599,204,2.946,205,2.946,206,2.477,207,2.946,208,2.946,209,2.946]],["title/classes/Author.html",[57,0.064,210,1.046]],["body/classes/Author.html",[3,0.199,4,0.175,5,0.175,7,0.334,12,1.94,13,0.029,20,1.608,25,0.873,29,1.906,31,1.187,33,0.629,34,0.542,35,1.418,39,0.371,56,0.371,57,0.063,63,2.582,68,0.014,69,0.014,88,0.677,95,0.728,97,1.479,111,2.168,153,0.912,163,2.091,188,1.858,203,2.978,210,1.037,211,0.784,212,1.414,213,1.295,214,4.073,215,4.473,216,4.473,217,4.473,218,3.914,219,2.771,220,2.168,221,3.775,222,3.297,223,3.305,224,1.808,225,3.369,226,2.151,227,2.771,228,1.808,229,3.369,230,3.369,231,3.369,232,2.151,233,3.305,234,2.167,235,2.438,236,2.151,237,2.953,238,3.777,239,2.771,240,2.771,241,1.808,242,1.414,243,2.151,244,1.96,245,1.96,246,3.777,247,2.771,248,2.771,249,2.771,250,1.789,251,2.151,252,2.953,253,1.513,254,2.425,255,2.151,256,2.978,257,1.789,258,1.414,259,1.839,260,2.634,261,2.881,262,2.223,263,0.912,264,1.96,265,0.784,266,2.441,267,2.628,268,1.583,269,1.583,270,1.789,271,1.167,272,1.808,273,1.808,274,2.771,275,1.808,276,1.808,277,1.808,278,1.808,279,1.808,280,1.808,281,1.808,282,1.808,283,1.583,284,1.808]],["title/classes/Comment.html",[57,0.064,285,1.526]],["body/classes/Comment.html",[3,0.313,4,0.276,5,0.276,7,0.525,12,1.889,13,0.029,25,0.861,29,1.94,31,1.12,39,0.48,56,0.48,57,0.088,68,0.019,69,0.019,88,1.065,95,1.146,97,1.395,111,2.354,188,1.549,210,1.63,211,1.234,213,1.797,250,2.482,253,2.099,256,3.011,257,2.482,258,2.225,259,2.377,262,2.377,263,1.436,264,2.72,265,1.234,266,2.377,267,1.837,270,2.482,285,2.099,286,2.225,287,2.58,288,4.264,289,3.385,290,2.741,291,3.926,292,3.385,293,2.72,294,2.49,295,3.385,296,3.365,297,2.846,298,2.49,299,2.49,300,2.49,301,1.234,302,2.49,303,2.49,304,2.846,305,2.49,306,2.846]],["title/modules/CoreModule.html",[70,1.307,76,1.978]],["body/modules/CoreModule.html",[3,0.392,4,0.345,5,0.345,13,0.028,39,0.534,44,0.915,56,0.392,57,0.081,68,0.022,69,0.022,70,2.079,72,1.942,73,2.427,76,3.905,78,3.16,79,2.87,80,2.296,81,2.296,83,3.146,112,3.973,121,3.892,128,3.558,307,3.558,308,3.558,309,4.232,310,4.232,311,4.232]],["title/classes/CreateCommentDto.html",[57,0.064,312,1.805]],["body/classes/CreateCommentDto.html",[3,0.365,4,0.321,5,0.321,7,0.612,12,1.844,13,0.029,25,0.612,31,1.094,39,0.517,56,0.365,57,0.097,68,0.021,69,0.021,97,1.182,188,1.713,210,1.853,211,1.438,213,1.988,253,2.321,259,2.563,262,2.563,263,1.673,266,2.321,285,1.81,287,2.781,290,2.703,291,3.872,293,3.008,297,3.315,303,2.901,312,2.744,313,4.108,314,3.315,315,2.519,316,3.721,317,4.252,318,3.944,319,3.944,320,3.315,321,3.944,322,3.315]],["title/classes/CreateTweetDto.html",[57,0.064,323,1.656]],["body/classes/CreateTweetDto.html",[3,0.363,4,0.319,5,0.319,7,0.608,12,1.837,13,0.029,25,0.608,31,1.09,39,0.516,56,0.363,57,0.096,68,0.021,69,0.021,97,1.177,188,1.706,210,1.849,211,1.43,213,1.98,253,2.313,259,2.556,262,2.556,263,1.663,266,2.313,271,2.127,287,2.773,290,2.697,293,2.997,313,4.097,315,2.509,316,3.708,317,4.237,320,3.296,322,3.296,323,2.509,324,2.885,325,3.921,326,4.325,327,3.921,328,1.799,329,2.332,330,3.708,331,2.885,332,2.885]],["title/classes/CreateUserDto.html",[57,0.064,333,1.526]],["body/classes/CreateUserDto.html",[3,0.313,4,0.276,5,0.276,7,0.525,12,2.023,13,0.029,20,1.439,25,0.861,31,1.2,35,1.152,39,0.48,54,1.146,56,0.313,57,0.088,68,0.019,69,0.019,88,1.065,97,1.451,111,2.634,161,3.405,163,2.036,188,1.879,211,1.234,213,1.797,218,3.812,233,3.365,250,2.482,252,3.647,253,2.099,254,3.365,256,2.811,259,2.546,261,2.72,262,2.66,263,1.436,266,2.099,268,2.49,269,2.49,270,2.482,271,1.837,315,2.278,316,3.365,333,2.099,334,4.264,335,2.49,336,5.181,337,3.385,338,3.385,339,3.385,340,3.385,341,3.385,342,3.385,343,4.575,344,3.385,345,2.013,346,3.385,347,3.385]],["title/injectables/JwtAuthGuard.html",[149,0.613,348,1.805]],["body/injectables/JwtAuthGuard.html",[3,0.449,4,0.395,5,0.395,13,0.028,39,0.532,44,1.05,45,3.572,46,2.417,56,0.449,57,0.093,68,0.024,69,0.024,149,1.059,150,1.908,348,3.12,349,2.887,350,3.572,351,2.634,352,4.855]],["title/injectables/JwtStrategy.html",[117,1.978,149,0.613]],["body/injectables/JwtStrategy.html",[3,0.381,4,0.335,5,0.335,7,0.639,8,2.044,9,2.615,13,0.029,25,0.639,31,1.125,33,1.204,34,1.038,35,1.038,37,1.502,38,2.45,39,0.528,44,0.891,46,2.051,56,0.381,57,0.079,66,1.619,68,0.022,69,0.022,117,3.093,130,3.463,131,3.463,148,3.03,149,0.958,150,1.619,153,2.417,163,1.619,206,3.463,351,2.235,353,3.463,354,4.372,355,4.119,356,5.201,357,4.119,358,4.119,359,3.463,360,3.03,361,3.463,362,3.463,363,3.463,364,4.119,365,4.119,366,4.119,367,4.119,368,4.119,369,4.119]],["title/injectables/LocalAuthGuard.html",[149,0.613,370,2.447]],["body/injectables/LocalAuthGuard.html",[3,0.449,4,0.395,5,0.395,13,0.028,39,0.532,44,1.05,45,3.572,46,2.417,56,0.449,57,0.093,68,0.024,69,0.024,149,1.059,150,1.908,350,3.572,351,2.634,370,4.231,371,4.081,372,4.855]],["title/injectables/LocalStrategy.html",[118,1.978,149,0.613]],["body/injectables/LocalStrategy.html",[3,0.342,4,0.301,5,0.301,7,0.573,8,1.904,9,2.483,13,0.029,25,0.752,31,1.048,33,1.416,34,1.221,35,1.221,37,1.346,39,0.567,44,0.798,46,1.838,52,3.049,54,1.945,56,0.342,57,0.071,58,2.195,66,1.451,68,0.021,69,0.021,95,1.25,97,1.43,118,2.882,122,3.103,149,0.893,150,1.451,153,1.566,161,3.776,163,1.904,164,2.882,166,2.716,185,2.195,301,1.346,333,1.694,334,2.716,351,2.003,354,4.548,359,3.103,360,2.716,361,3.103,362,3.103,363,3.103,373,3.103,374,3.692,375,3.692,376,3.692,377,3.692,378,3.103,379,4.846,380,2.195,381,3.692,382,2.003]],["title/injectables/ParseObjectIdPipe.html",[149,0.613,383,1.656]],["body/injectables/ParseObjectIdPipe.html",[0,0.882,3,0.178,4,0.156,5,0.156,7,0.298,8,1.187,13,0.029,16,2.78,18,3.208,19,3.208,20,1.663,23,2.515,24,1.263,25,0.929,27,1.263,28,1.043,29,1.583,31,0.416,33,0.562,34,0.484,35,0.484,37,0.701,39,0.503,40,2.77,41,1.985,42,3.355,43,1.263,44,0.416,47,3.355,48,1.985,49,3.355,50,3.475,51,1.043,56,0.28,57,0.058,58,1.143,59,1.263,61,3.355,62,3.73,63,2.718,66,2.078,68,0.013,69,0.013,95,1.263,149,0.556,150,0.755,181,1.414,188,1.432,198,1.263,201,2.648,203,1.043,210,0.95,220,2.07,244,1.796,245,2.734,265,0.701,285,0.882,287,1.504,290,0.882,291,1.263,301,0.701,312,1.639,315,0.957,323,1.858,328,2.747,329,1.143,348,1.043,349,1.143,382,1.043,383,2.43,384,1.414,385,2.222,386,1.985,387,1.922,388,1.796,389,1.985,390,2.222,391,1.414,392,1.414,393,2.539,394,1.985,395,1.858,396,1.414,397,1.639,398,1.263,399,0.882,400,2.539,401,1.414,402,2.024,403,1.414,404,1.414,405,1.985,406,1.263,407,1.263,408,1.263,409,3.036,410,1.615,411,1.143,412,2.745,413,2.222,414,1.414,415,1.414,416,1.615,417,1.615,418,1.615,419,2.539,420,1.615,421,1.615,422,3.111,423,2.539,424,1.615,425,3.382,426,3.382,427,3.382,428,1.615,429,1.615,430,1.615,431,1.414,432,1.615,433,2.539,434,3.59,435,2.745,436,1.043,437,1.615,438,1.263,439,1.615,440,1.615,441,1.615,442,2.77,443,1.615,444,2.539,445,1.615,446,1.615,447,1.414,448,1.414,449,1.615,450,1.615,451,1.615,452,1.414,453,1.615,454,1.615,455,1.615,456,2.539,457,1.615,458,1.615,459,1.414,460,1.414,461,1.414,462,1.414,463,1.414,464,1.615]],["title/injectables/ParseObjectIdPipe-1.html",[149,0.513,383,1.388,465,2.787]],["body/injectables/ParseObjectIdPipe-1.html",[3,0.287,4,0.252,5,0.252,7,0.481,8,1.691,9,2.453,13,0.029,20,0.974,25,0.668,31,0.67,33,0.905,34,0.78,35,0.78,37,1.129,39,0.552,40,1.681,44,0.67,54,1.675,56,0.398,57,0.082,66,2.344,68,0.018,69,0.018,88,0.974,95,1.81,97,0.724,149,0.911,150,1.217,153,1.314,155,1.421,163,1.217,164,1.842,165,2.829,174,2.036,185,3.179,220,2.383,265,1.129,301,1.569,315,1.542,333,1.975,345,1.842,380,2.56,382,2.336,383,2.143,385,3.167,386,2.829,388,2.56,389,2.829,394,2.829,397,1.681,399,1.421,405,2.829,406,2.036,407,2.036,408,2.036,409,1.842,436,1.681,442,2.336,466,2.279,467,3.098,468,2.279,469,3.167,470,2.684,471,2.279,472,2.036,473,2.604,474,2.604,475,2.279,476,3.619,477,2.279,478,3.619,479,2.604,480,2.604,481,2.279,482,2.604,483,2.279,484,2.279,485,2.279,486,2.604,487,1.842,488,2.604,489,2.279,490,3.167,491,2.604,492,2.279,493,2.036,494,3.167,495,2.279,496,1.842,497,2.279]],["title/classes/Tweet.html",[57,0.064,328,1.526]],["body/classes/Tweet.html",[3,0.229,4,0.201,5,0.201,7,0.384,12,1.876,13,0.029,20,1.152,25,0.889,29,1.553,31,1.165,33,0.723,34,0.623,35,1.297,39,0.446,56,0.404,57,0.07,68,0.016,69,0.016,88,0.778,95,0.837,97,1.39,111,2.045,153,1.049,188,1.632,201,1.987,210,1.619,211,0.902,213,1.439,220,1.049,221,3.383,223,2.694,234,1.626,235,1.987,237,2.407,242,1.626,250,1.987,253,1.68,256,2.924,257,1.987,258,1.626,259,2.001,260,2.407,261,2.593,262,2.001,263,1.049,264,2.178,265,0.902,266,2.362,267,2.616,270,1.987,271,1.342,285,2.559,287,2.777,288,4.582,290,2.73,293,2.178,294,1.82,296,2.694,298,1.82,299,1.82,300,1.82,301,0.902,302,1.82,326,4.378,328,1.68,330,2.694,331,1.82,332,1.82,399,1.135,438,2.407,498,1.626,499,4.103,500,4.688,501,3.662,502,3.662,503,2.473,504,2.079,505,2.473,506,2.473,507,2.473,508,3.079,509,2.473,510,2.079,511,2.079,512,2.079,513,2.473,514,2.473,515,2.473,516,2.473,517,2.473,518,1.82,519,1.626,520,2.079]],["title/controllers/TweetController.html",[0,1.526,411,1.978]],["body/controllers/TweetController.html",[0,0.666,2,0.722,3,0.134,4,0.118,5,0.118,7,0.225,8,0.946,12,1.564,13,0.029,16,3.127,18,3.431,19,3.431,20,1.71,23,2.829,24,1.582,25,0.97,27,1.582,28,1.306,29,1.82,31,0.928,33,1.163,34,1.003,35,1.003,37,1.564,39,0.457,40,2.466,41,1.582,42,3.431,43,0.954,44,0.314,47,2.988,48,1.582,49,2.988,50,3.127,51,0.787,56,0.223,57,0.046,58,0.863,59,0.954,61,2.988,62,3.686,63,2.537,66,1.869,68,0.01,69,0.01,95,1.044,149,0.443,181,1.771,188,1.61,198,0.954,201,2.761,203,0.787,210,0.757,220,2.345,244,2.134,245,3.026,265,0.529,285,1.415,287,1.198,290,1.104,291,1.582,301,0.529,312,1.947,315,0.722,323,2.137,328,2.788,329,0.863,348,0.787,349,0.863,382,0.787,383,1.982,384,1.068,386,0.954,388,0.863,389,0.954,390,1.771,391,1.068,392,1.068,393,2.023,394,1.582,395,1.536,396,1.068,397,1.306,398,0.954,399,0.666,400,2.023,401,1.068,402,1.673,403,1.068,404,1.068,405,1.582,406,0.954,407,0.954,408,0.954,409,3.173,410,1.22,411,1.431,412,2.269,413,2.64,414,1.771,415,1.068,416,1.22,417,1.22,418,1.22,419,2.023,420,1.22,421,1.22,422,3.344,423,2.593,424,1.22,425,3.631,426,3.631,427,3.631,428,1.22,429,1.22,430,1.22,431,1.068,432,1.22,433,3.346,434,3.925,435,3.157,436,1.947,437,1.22,438,1.582,439,2.023,440,1.22,441,1.22,442,2.999,443,1.22,444,3.017,445,2.023,446,2.023,447,1.068,448,1.068,449,1.22,450,1.22,451,2.023,452,1.771,453,1.22,454,1.22,455,1.22,456,2.023,457,1.22,458,1.22,459,1.771,460,1.771,461,1.068,462,1.068,463,1.068,464,1.22,487,0.863,496,0.863,521,1.22,522,2.023,523,1.306,524,2.023,525,1.582,526,1.582,527,1.22,528,2.593,529,1.451,530,2.407,531,1.451,532,1.451,533,1.22,534,1.22,535,1.451,536,1.451,537,2.593,538,3.017,539,2.023,540,1.22,541,1.451,542,1.22,543,1.451,544,1.451,545,1.451,546,1.451,547,1.451,548,1.22,549,1.22,550,1.451]],["title/modules/TweetModule.html",[70,1.307,77,1.978]],["body/modules/TweetModule.html",[2,2.609,3,0.386,4,0.339,5,0.339,13,0.029,34,1.05,39,0.573,44,0.901,56,0.386,57,0.08,68,0.022,69,0.022,70,2.059,72,1.913,73,2.404,77,3.76,79,2.843,80,2.262,81,2.262,83,2.479,87,3.067,88,1.311,120,3.855,257,2.262,328,1.913,329,2.479,395,3.148,396,3.067,411,3.408,519,3.444,551,3.505,552,3.505,553,4.169,554,4.169,555,3.505,556,4.169]],["title/classes/TweetResponseDto.html",[57,0.064,402,1.805]],["body/classes/TweetResponseDto.html",[3,0.252,4,0.222,5,0.222,7,0.423,12,2.033,13,0.029,20,1.237,25,0.913,29,1.668,31,1.206,35,1.272,39,0.427,54,1.709,56,0.252,57,0.075,68,0.017,69,0.017,88,0.858,97,1.179,111,2.142,166,2.006,188,1.709,201,2.134,210,1.451,211,0.994,213,1.545,221,2.585,234,1.792,235,2.134,237,2.585,242,2.585,250,2.134,253,1.804,256,3.119,259,2.116,260,2.585,261,2.743,262,2.116,263,1.156,266,2.456,267,3.026,270,2.134,271,1.479,285,2.116,287,2.297,288,4.229,290,2.793,293,2.338,294,2.006,296,2.893,298,2.006,299,2.006,300,2.006,301,0.994,302,2.006,326,4.478,330,2.893,331,2.006,332,2.006,402,2.134,438,2.585,499,3.393,500,3.877,504,2.292,508,3.306,510,2.292,511,2.292,512,2.292,557,2.292,558,3.877,559,2.726,560,2.726,561,2.726,562,2.726,563,2.726,564,2.726,565,2.726]],["title/injectables/TweetService.html",[149,0.613,395,1.656]],["body/injectables/TweetService.html",[3,0.188,4,0.165,5,0.165,7,0.315,8,1.238,9,2.718,13,0.029,25,0.775,31,1.126,33,1.459,34,1.258,35,1.258,37,1.82,38,2.297,39,0.482,42,2.071,44,0.439,56,0.188,57,0.039,66,2.173,68,0.013,69,0.013,88,0.638,95,1.763,97,0.902,111,0.86,149,0.58,150,0.797,153,1.336,163,1.518,164,2.968,170,2.842,174,1.333,185,2.804,210,0.991,220,2.542,235,1.709,265,0.739,301,2.016,312,2.922,323,2.348,328,1.773,329,1.206,382,2.708,395,1.569,397,1.709,398,1.333,399,0.931,401,1.492,402,1.101,403,1.492,431,1.492,436,2.363,442,2.826,468,1.492,469,3.204,481,3.204,483,3.204,484,2.842,485,2.842,487,1.874,490,3.204,492,2.842,493,1.333,494,2.318,495,1.492,496,1.874,497,1.492,499,1.492,518,1.492,522,2.649,523,1.709,524,2.649,525,2.071,526,2.071,527,2.649,533,2.649,542,2.649,558,3.247,566,1.705,567,2.028,568,2.028,569,3.151,570,2.028,571,2.028,572,2.028,573,2.028,574,2.028,575,2.028,576,2.028,577,2.028,578,2.028,579,3.863,580,2.028,581,3.863,582,3.863,583,3.863,584,3.863,585,4.355,586,3.151,587,3.151,588,3.863,589,2.028,590,3.151,591,3.151,592,3.151,593,2.071,594,2.028,595,2.028,596,3.151,597,2.028,598,2.028,599,2.028]],["title/classes/UpdateTweetDto.html",[57,0.064,593,2.186]],["body/classes/UpdateTweetDto.html",[3,0.448,4,0.394,5,0.394,13,0.028,39,0.531,56,0.448,57,0.093,68,0.024,69,0.024,211,1.764,323,2.409,324,3.559,351,2.625,398,3.18,399,2.22,523,2.625,593,3.772,600,4.067,601,4.067,602,4.067,603,4.838]],["title/classes/UpdateUserDto.html",[57,0.064,470,1.805]],["body/classes/UpdateUserDto.html",[3,0.449,4,0.395,5,0.395,13,0.028,39,0.532,51,2.634,56,0.449,57,0.093,68,0.024,69,0.024,211,1.77,333,2.228,335,3.572,351,2.634,380,2.887,470,3.12,523,2.634,601,4.081,604,4.081,605,4.855]],["title/classes/User.html",[54,1.126,57,0.064]],["body/classes/User.html",[3,0.186,4,0.163,5,0.163,7,0.312,12,1.956,13,0.029,20,1.773,25,0.875,29,1.837,31,1.192,33,0.587,34,0.506,35,1.389,39,0.355,54,1.058,56,0.355,57,0.06,63,2.53,68,0.013,69,0.013,88,0.632,95,0.68,97,1.497,111,2.276,153,0.852,161,3.411,163,2.039,188,1.908,189,2.628,190,2.628,203,3.058,211,0.732,213,1.228,214,3.946,215,4.363,216,4.363,217,4.363,218,3.818,219,2.628,220,2.108,221,3.704,223,3.187,224,1.688,225,3.226,227,2.628,228,1.688,229,3.226,230,3.226,231,3.226,233,3.187,234,2.054,235,2.35,237,2.847,238,3.641,239,2.628,240,2.628,241,1.688,242,1.32,244,1.859,245,1.859,246,3.641,247,2.628,248,2.628,249,2.628,250,2.082,252,2.847,253,1.434,254,2.3,256,2.991,257,1.696,258,1.32,259,1.988,260,2.523,261,2.791,262,2.281,263,0.852,264,1.859,265,0.732,266,2.463,267,2.547,268,1.477,269,1.477,270,2.082,271,1.089,272,1.688,273,1.688,274,2.628,275,1.688,276,1.688,277,1.688,278,1.688,279,1.688,280,1.688,281,1.688,472,1.32,606,1.32,607,3.126,608,2.008,609,2.008,610,2.008,611,2.008,612,2.008,613,2.008,614,2.008,615,2.008,616,2.008,617,1.32,618,1.688]],["title/controllers/UsersController.html",[0,1.526,619,2.186]],["body/controllers/UsersController.html",[0,0.786,2,0.853,3,0.159,4,0.139,5,0.139,7,0.266,8,1.083,12,1.692,13,0.029,16,3.534,17,4.706,18,3.679,19,3.679,20,1.761,23,2.357,24,1.811,25,0.981,26,3.332,27,1.811,28,1.495,29,1.681,31,1.004,33,1.269,34,1.094,35,1.094,37,1.692,39,0.47,40,2.647,41,2.273,43,1.126,44,0.37,47,3.207,48,1.811,49,3.05,50,3.207,51,0.929,54,1.895,56,0.159,57,0.033,58,1.019,59,1.126,61,3.05,62,3.879,63,2.569,66,1.824,68,0.012,69,0.012,97,0.808,155,1.587,163,1.083,170,3.196,186,1.44,188,1.342,198,1.126,201,2.917,203,2.15,220,2.28,244,1.639,245,2.357,252,1.811,265,0.624,290,1.265,333,2.129,345,1.019,348,0.929,349,1.019,380,1.639,390,2.028,391,1.26,392,1.26,397,0.929,404,1.26,409,3.197,412,2.544,413,2.916,414,2.028,415,1.26,422,3.414,425,3.955,426,3.955,427,3.955,434,3.955,435,2.028,436,2.15,442,2.753,447,1.26,448,1.26,452,2.028,459,2.028,460,2.916,461,1.26,462,1.26,463,1.26,470,2.753,471,1.26,475,1.26,487,1.019,489,1.26,493,1.126,496,1.019,521,1.44,523,1.495,525,1.811,526,1.811,528,2.907,534,1.44,537,2.907,538,3.652,539,1.44,540,1.44,548,1.44,549,1.44,619,1.811,620,1.44,621,2.317,622,2.317,623,1.713,624,1.713,625,1.713,626,3.963,627,1.713,628,1.713,629,2.756,630,2.756,631,1.713,632,1.713,633,1.713,634,2.756,635,1.713,636,1.713,637,1.44,638,1.713,639,1.713,640,1.713,641,1.713,642,1.713,643,1.713,644,1.713,645,1.713,646,1.713,647,1.713]],["title/modules/UsersModule.html",[70,1.307,78,1.656]],["body/modules/UsersModule.html",[2,2.556,3,0.374,4,0.329,5,0.329,13,0.029,34,1.017,39,0.568,44,0.873,54,1.366,56,0.374,57,0.077,68,0.022,69,0.022,70,2.017,72,1.852,73,2.355,78,3.172,79,2.785,80,2.189,81,2.189,83,2.4,87,2.969,88,1.269,120,3.776,121,3.776,155,3.046,257,2.189,345,2.4,555,3.392,617,3.374,619,3.71,637,3.392,648,3.392,649,3.392,650,3.392,651,4.035,652,4.035,653,4.035]],["title/injectables/UsersService.html",[149,0.613,155,1.526]],["body/injectables/UsersService.html",[3,0.235,4,0.207,5,0.207,7,0.394,8,1.468,9,2.819,13,0.029,20,0.799,25,0.873,31,1.216,33,1.59,34,1.371,35,1.371,37,1.984,38,2.635,39,0.521,40,1.379,44,0.55,54,1.5,56,0.346,57,0.072,66,2.211,68,0.016,69,0.016,88,0.799,95,1.654,97,1.216,149,0.816,150,0.999,153,1.585,155,1.714,163,1.468,164,2.222,165,2.456,174,1.67,185,2.905,220,2.576,265,0.926,301,1.362,315,1.265,333,2.388,345,1.511,380,2.222,382,2.027,383,1.265,386,1.67,388,1.511,389,1.67,394,2.456,397,1.379,399,1.166,405,2.456,406,1.67,407,1.67,408,1.67,409,1.511,436,2.65,442,2.824,466,1.87,468,1.87,469,3.593,470,3.052,471,1.87,472,1.67,473,2.136,474,3.141,475,2.749,476,3.141,477,1.87,478,3.141,479,2.136,480,2.136,481,1.87,482,2.136,483,1.87,484,1.87,485,1.87,486,2.136,487,2.222,488,2.136,489,2.749,490,2.749,491,2.136,492,1.87,493,2.456,494,2.749,495,1.87,496,2.222,497,1.87,523,2.027,525,2.456,526,2.456,621,3.141,622,3.141,654,2.541,655,2.541,656,2.541,657,2.541,658,2.541,659,2.541,660,2.541,661,2.541]],["title/coverage.html",[662,3.325]],["body/coverage.html",[0,2.228,1,1.966,5,0.244,6,2.514,13,0.029,25,0.464,52,1.489,54,1.013,57,0.119,68,0.018,69,0.018,82,2.2,89,2.2,96,2.2,117,1.779,118,1.779,139,4.965,149,1.129,151,2.514,155,1.372,210,0.941,212,2.761,235,3.613,283,2.2,285,1.372,286,2.761,301,1.09,305,2.2,312,1.623,313,3.09,314,2.514,323,1.489,324,3.09,328,1.372,333,1.372,334,2.2,335,3.09,348,1.623,349,1.779,350,3.09,353,2.514,370,2.2,371,2.514,373,2.514,383,2.091,384,3.09,395,1.489,402,1.623,411,1.779,466,3.09,470,1.623,498,2.761,519,1.966,557,2.514,566,2.514,593,1.966,600,2.514,604,2.514,606,2.761,617,1.966,619,1.966,620,2.514,662,2.2,663,2.991,664,2.991,665,2.991,666,4.855,667,6.385,668,2.991,669,4.2,670,2.514,671,4.2,672,3.571,673,2.514,674,2.514,675,2.514,676,4.2,677,4.2,678,4.2,679,4.2,680,2.991,681,2.991,682,2.991,683,2.991,684,4.2,685,4.2,686,2.991,687,2.991,688,2.991,689,2.991,690,2.991,691,2.991]],["title/dependencies.html",[73,1.833,692,2.343]],["body/dependencies.html",[13,0.029,44,0.927,46,2.133,51,2.325,57,0.102,68,0.023,69,0.023,73,1.966,86,3.602,88,1.348,126,3.152,148,3.152,165,2.816,263,1.817,265,1.562,360,4.269,378,3.602,399,1.966,602,3.602,693,6.072,694,4.285,695,4.285,696,4.285,697,4.285,698,4.285,699,4.285,700,4.285,701,4.285,702,4.285,703,4.285,704,4.285,705,4.285,706,4.285,707,4.285,708,4.285,709,4.285,710,4.285,711,4.285,712,4.285,713,4.285]],["title/miscellaneous/functions.html",[714,1.512,715,3.358]],["body/miscellaneous/functions.html",[7,0.753,13,0.027,25,0.753,33,1.419,34,1.223,35,1.223,37,1.77,68,0.024,69,0.024,89,4.231,97,1.431,670,4.081,672,3.572,673,5.151,714,2.634,715,4.081,716,4.081,717,4.855,718,4.855,719,4.855]],["title/index.html",[7,0.432,720,2.787,721,2.787]],["body/index.html",[4,0.319,13,0.028,63,1.799,68,0.021,69,0.021,210,1.233,303,2.885,662,2.885,722,3.921,723,3.921,724,5.04,725,3.921,726,3.921,727,3.921,728,3.921,729,3.921,730,3.921,731,5.57,732,3.921,733,3.921,734,3.921,735,3.921,736,6.33,737,3.921,738,3.296,739,3.921,740,6.224,741,3.921,742,3.921,743,5.04,744,3.921,745,3.921,746,3.921,747,3.921,748,5.04,749,5.04,750,3.921,751,3.921,752,3.921,753,5.04,754,5.04,755,3.921,756,3.921,757,3.921,758,3.921,759,3.921,760,3.296,761,3.921,762,3.921,763,3.921,764,3.921,765,3.921,766,3.921,767,3.921,768,3.921,769,3.921,770,3.921,771,3.921,772,3.921,773,3.921,774,3.921,775,3.921,776,3.296]],["title/modules.html",[72,2.074]],["body/modules.html",[13,0.024,68,0.024,69,0.024,71,3.169,72,2.212,76,2.867,77,2.867,78,2.4,112,2.867,760,5.426,777,6.455,778,6.455,779,6.455]],["title/overview.html",[780,3.8]],["body/overview.html",[2,1.863,13,0.028,52,3.117,68,0.021,69,0.021,71,4.173,72,1.717,73,2.243,74,3.145,75,3.145,76,3.776,77,3.563,78,3.162,79,2.653,80,2.03,81,2.03,112,3.974,113,3.145,115,3.145,116,3.145,117,3.238,118,3.238,150,1.47,155,2.873,211,1.364,307,3.145,308,3.145,395,2.711,477,2.752,551,3.145,552,3.145,648,3.145,649,3.145,650,3.145,780,3.145,781,3.741,782,3.741,783,3.741]],["title/properties.html",[213,1.57,692,2.343]],["body/properties.html",[13,0.028,63,2.334,68,0.025,69,0.025,210,1.6,213,1.999,776,4.276,784,5.086,785,5.086,786,5.086]],["title/miscellaneous/typealiases.html",[714,1.512,787,3.995]],["body/miscellaneous/typealiases.html",[7,0.753,13,0.024,25,0.753,68,0.024,69,0.024,212,3.191,264,3.767,282,4.834,286,3.191,304,4.834,472,3.78,498,3.191,518,4.231,606,3.191,714,2.634,788,4.855,789,4.081,790,4.081,791,4.081,792,4.081]],["title/miscellaneous/variables.html",[714,1.512,793,3.358]],["body/miscellaneous/variables.html",[7,0.643,13,0.029,25,0.643,68,0.022,69,0.022,82,3.049,96,3.84,97,0.968,98,3.484,111,2.214,212,2.724,267,3.477,283,3.84,284,3.484,286,2.724,301,1.511,305,3.84,306,3.484,385,3.049,388,3.811,498,2.724,519,3.431,520,3.484,606,2.724,617,3.431,618,3.484,672,3.049,674,4.388,675,4.804,714,2.248,716,4.388,738,3.484,789,3.484,790,3.484,791,3.484,792,3.484,793,3.484,794,4.144,795,4.144,796,4.144,797,4.144,798,4.144]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":235,"title":{},"body":{"classes/Author.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"coverage.html":{}}}],["0.0.1",{"_index":785,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":299,"title":{},"body":{"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["03t15:05:08.382z",{"_index":300,"title":{},"body":{"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["1",{"_index":465,"title":{"injectables/ParseObjectIdPipe-1.html":{}},"body":{}}],["1.0.0",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":477,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["10.0.1",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["2023",{"_index":298,"title":{},"body":{"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["3",{"_index":782,"title":{},"body":{"overview.html":{}}}],["3/4",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["3600s",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["3b44424280af93cab4312c3",{"_index":272,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["4.0.1",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":781,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["573864923",{"_index":274,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["6.1.4",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["6.8.1",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["63b4442c280af93cab4312c5",{"_index":273,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["66",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["678245",{"_index":510,"title":{},"body":{"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["7.2.0",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["7/9",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["8/10",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":783,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":588,"title":{},"body":{"injectables/TweetService.html":{}}}],["access_token",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":494,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["addcomment",{"_index":522,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["addcomment(@param('id",{"_index":454,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["addcomment(id",{"_index":527,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["ah",{"_index":332,"title":{},"body":{"classes/CreateTweetDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["ajout",{"_index":451,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["aliases",{"_index":788,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":303,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"index.html":{}}}],["apibadrequestresponse",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":400,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["apiokresponse",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":537,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":738,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["app.setglobalprefix('api",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.useglobalpipes(validationpipe",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":730,"title":{},"body":{"index.html":{}}}],["applyglobalconfiguration",{"_index":674,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":71,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":404,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":350,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":311,"title":{},"body":{"modules/CoreModule.html":{}}}],["authentifi",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":352,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":372,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":112,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":210,"title":{"classes/Author.html":{}},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["author['username",{"_index":322,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{}}}],["authordocument",{"_index":282,"title":{},"body":{"classes/Author.html":{},"miscellaneous/typealiases.html":{}}}],["authorschema",{"_index":283,"title":{},"body":{"classes/Author.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":52,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":214,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["avec",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["await",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":761,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`l'id",{"_index":407,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception})@delete(':id",{"_index":549,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception})@get",{"_index":540,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception})@get(':id",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception})@get(':id/comments",{"_index":543,"title":{},"body":{"controllers/TweetController.html":{}}}],["badrequestexception})@get(':username",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception})@patch(':id",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception})@post",{"_index":535,"title":{},"body":{"controllers/TweetController.html":{}}}],["badrequestexception})@post(':id/comments",{"_index":531,"title":{},"body":{"controllers/TweetController.html":{}}}],["badrequestexception})@post('auth/login",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["badrequestexception})@post()@post",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["base",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["bcrypt",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":479,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["beyonce",{"_index":297,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDto.html":{}}}],["bien",{"_index":460,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["bien\",\"j'adore",{"_index":512,"title":{},"body":{"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["body",{"_index":390,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":673,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":779,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":777,"title":{},"body":{"modules.html":{}}}],["building",{"_index":725,"title":{},"body":{"index.html":{}}}],["cach",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["catch",{"_index":483,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["celui",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["cet",{"_index":444,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["cette",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["class",{"_index":57,"title":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":211,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":307,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":308,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":309,"title":{},"body":{"modules/CoreModule.html":{}}}],["cluster_tweetmodule",{"_index":551,"title":{},"body":{"modules/TweetModule.html":{},"overview.html":{}}}],["cluster_tweetmodule_providers",{"_index":552,"title":{},"body":{"modules/TweetModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":648,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":649,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":650,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["comment",{"_index":285,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"coverage.html":{}}}],["comment.content",{"_index":457,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["comment.dto",{"_index":401,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["comment.dto.ts",{"_index":314,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:14",{"_index":318,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:22",{"_index":319,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.entity",{"_index":509,"title":{},"body":{"classes/Tweet.html":{}}}],["commentaire",{"_index":291,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["commentaires",{"_index":438,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{}}}],["commentdocument",{"_index":304,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/typealiases.html":{}}}],["comments",{"_index":499,"title":{},"body":{"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{}}}],["comments.author",{"_index":589,"title":{},"body":{"injectables/TweetService.html":{}}}],["commentschema",{"_index":305,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compare",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('dbname",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('mongodb_uri",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["connexion",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["console.log('findone",{"_index":449,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["console.log(comment",{"_index":455,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["console.log(createtweetdto",{"_index":417,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["console.log(request.user",{"_index":431,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["console.log(request.user.username",{"_index":416,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["console.log(response",{"_index":590,"title":{},"body":{"injectables/TweetService.html":{}}}],["console.log(tweet",{"_index":420,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["const",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/Author.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor(author",{"_index":501,"title":{},"body":{"classes/Tweet.html":{}}}],["constructor(authservice",{"_index":374,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(avatar",{"_index":219,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["constructor(private",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["constructor(tweetmodel",{"_index":567,"title":{},"body":{"injectables/TweetService.html":{}}}],["constructor(usermodel",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":287,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{}}}],["contenu",{"_index":293,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('tweets",{"_index":410,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["controller('users",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["core/auth/auth.service",{"_index":53,"title":{},"body":{"controllers/AppController.html":{}}}],["core/core.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":76,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["correctes",{"_index":427,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["coverage",{"_index":662,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr",{"_index":414,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["create",{"_index":523,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":415,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["create(createtweetdto",{"_index":533,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["create(createuserdto",{"_index":475,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createcommentdto",{"_index":312,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"coverage.html":{}}}],["createtweetdto",{"_index":323,"title":{"classes/CreateTweetDto.html":{}},"body":{"classes/CreateTweetDto.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"coverage.html":{}}}],["createtweetdto.content",{"_index":418,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["createuserdto",{"_index":333,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.password",{"_index":480,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["création",{"_index":413,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["d'un",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["d'utilisateur",{"_index":233,"title":{},"body":{"classes/Author.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["dans",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["date",{"_index":288,"title":{},"body":{"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["date().gettime",{"_index":302,"title":{},"body":{"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["dbname",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/CreateUserDto.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":267,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":462,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":73,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["des",{"_index":245,"title":{},"body":{"classes/Author.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["description",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["dest",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["development",{"_index":739,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["doit",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["données",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["données'})@apicreatedresponse({description",{"_index":534,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["données'})@apiokresponse({description",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["données.'})@apiokresponse({description",{"_index":538,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["dto/create",{"_index":397,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/tweet.response.dto",{"_index":403,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["dto/update",{"_index":471,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["du",{"_index":290,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"controllers/UsersController.html":{}}}],["durée",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["dépendance",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["d’environnement",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["e2e",{"_index":750,"title":{},"body":{"index.html":{}}}],["each",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["efficient",{"_index":726,"title":{},"body":{"index.html":{}}}],["en",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["entities/author.entity",{"_index":320,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{}}}],["entities/comment.entity",{"_index":321,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["entities/tweet.entity",{"_index":329,"title":{},"body":{"classes/CreateTweetDto.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"injectables/TweetService.html":{}}}],["entities/user.entity",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["env",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envs/helper/env.helper",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":484,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["erreur",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["error",{"_index":579,"title":{},"body":{"injectables/TweetService.html":{}}}],["error(err",{"_index":485,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["error(error",{"_index":580,"title":{},"body":{"injectables/TweetService.html":{}}}],["example",{"_index":266,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["exec",{"_index":492,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["expiresin",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":351,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":436,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findcommentsinfo",{"_index":524,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["findcommentsinfo(@param('id",{"_index":441,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["findcommentsinfo(id",{"_index":542,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["findone",{"_index":525,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":448,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":487,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyusername",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyusername(@param('username",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyusername(username",{"_index":489,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserinfo(@param('blabla",{"_index":429,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["finduserinfo(request",{"_index":578,"title":{},"body":{"injectables/TweetService.html":{}}}],["followers",{"_index":215,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["following",{"_index":216,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["foreignfield",{"_index":584,"title":{},"body":{"injectables/TweetService.html":{}}}],["formulaire",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["foundtweet",{"_index":594,"title":{},"body":{"injectables/TweetService.html":{}}}],["foundtweet.comments",{"_index":597,"title":{},"body":{"injectables/TweetService.html":{}}}],["fourni",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":724,"title":{},"body":{"index.html":{}}}],["function",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":715,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gaga",{"_index":269,"title":{},"body":{"classes/Author.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["gazouilleur",{"_index":231,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["gazouilli",{"_index":326,"title":{},"body":{"classes/CreateTweetDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["get(':id",{"_index":447,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["get(':id/comments",{"_index":440,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["get(':username",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('blabla",{"_index":428,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["getenvpath",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getenvpath(`src/envs",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["getenvpath(dest",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":720,"title":{"index.html":{}},"body":{}}],["grow",{"_index":757,"title":{},"body":{"index.html":{}}}],["grâce",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["gérer",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":478,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["here",{"_index":767,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":773,"title":{},"body":{"index.html":{}}}],["https://pbs.twimg.com/profile_images/1143032401108578305/8iysjofv_400x400.jpg",{"_index":225,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["hydrateddocument",{"_index":264,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/Tweet.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":442,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["idtofetch",{"_index":585,"title":{},"body":{"injectables/TweetService.html":{}}}],["if(request?.user",{"_index":430,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["if(response.length",{"_index":591,"title":{},"body":{"injectables/TweetService.html":{}}}],["implements",{"_index":315,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["informations",{"_index":423,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["infos",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":149,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":468,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(tweet.name",{"_index":576,"title":{},"body":{"injectables/TweetService.html":{}}}],["injectmodel(user.name",{"_index":473,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":735,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":737,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdatestring",{"_index":296,"title":{},"body":{"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["isdatestring()@prop({default",{"_index":294,"title":{},"body":{"classes/Comment.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["isglobal",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":259,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["isnumber",{"_index":260,"title":{},"body":{"classes/Author.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["isnumber()@isoptional()@prop({default",{"_index":234,"title":{},"body":{"classes/Author.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["isoptional",{"_index":261,"title":{},"body":{"classes/Author.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@prop({default",{"_index":241,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["isoptional()@prop({type",{"_index":504,"title":{},"body":{"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["isstring",{"_index":262,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["isstring()@isnotempty",{"_index":317,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@prop({required",{"_index":250,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["isstring()@isoptional()@prop({default",{"_index":228,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["isstring()@prop({default",{"_index":224,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["j'aime",{"_index":248,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["j'aimes",{"_index":508,"title":{},"body":{"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["join",{"_index":763,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":348,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":117,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":770,"title":{},"body":{"index.html":{}}}],["key",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["l'auteur",{"_index":253,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["l'authentification",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["l'avatar",{"_index":227,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["l'utilisateur",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"classes/Author.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["la",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"classes/Comment.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["lady",{"_index":268,"title":{},"body":{"classes/Author.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["ladygaga",{"_index":271,"title":{},"body":{"classes/Author.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["le",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["les",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"controllers/UsersController.html":{}}}],["license",{"_index":776,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":754,"title":{},"body":{"index.html":{}}}],["liked",{"_index":217,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["likes",{"_index":500,"title":{},"body":{"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["liste",{"_index":244,"title":{},"body":{"classes/Author.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["loaded",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":378,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":370,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localfield",{"_index":583,"title":{},"body":{"injectables/TweetService.html":{}}}],["localstrategy",{"_index":118,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["login(req",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["login(user",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["lookup",{"_index":582,"title":{},"body":{"injectables/TweetService.html":{}}}],["l’injection",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["masquera",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["match",{"_index":587,"title":{},"body":{"injectables/TweetService.html":{}}}],["matching",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":714,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":753,"title":{},"body":{"index.html":{}}}],["mode",{"_index":743,"title":{},"body":{"index.html":{}}}],["model",{"_index":469,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["modifi",{"_index":452,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["modification",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["module",{"_index":70,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":72,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":265,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":555,"title":{},"body":{"modules/TweetModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":766,"title":{},"body":{"index.html":{}}}],["mot",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["motdepasse1234",{"_index":615,"title":{},"body":{"classes/User.html":{}}}],["myśliwiec",{"_index":771,"title":{},"body":{"index.html":{}}}],["méthode",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["n'a",{"_index":445,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["n'est",{"_index":408,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["name",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":425,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["nest",{"_index":731,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":775,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":602,"title":{},"body":{"classes/UpdateTweetDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateUserDto.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":301,"title":{},"body":{"classes/Comment.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcomment",{"_index":456,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["newcomments",{"_index":596,"title":{},"body":{"injectables/TweetService.html":{}}}],["nickname",{"_index":218,"title":{},"body":{"classes/Author.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["node.js",{"_index":723,"title":{},"body":{"index.html":{}}}],["nom",{"_index":252,"title":{},"body":{"classes/Author.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["nombre",{"_index":237,"title":{},"body":{"classes/Author.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["notfoundexception",{"_index":393,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["notfoundexception})@get(':id",{"_index":546,"title":{},"body":{"controllers/TweetController.html":{}}}],["notre",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["nouveau",{"_index":229,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["null",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":221,"title":{},"body":{"classes/Author.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["object",{"_index":424,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["objectid",{"_index":220,"title":{},"body":{"classes/Author.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["omit",{"_index":316,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{}}}],["open",{"_index":755,"title":{},"body":{"index.html":{}}}],["optional",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":780,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":692,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["par",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":392,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseobjectidpipe",{"_index":383,"title":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{}},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["partialtype",{"_index":601,"title":{},"body":{"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createtweetdto",{"_index":603,"title":{},"body":{"classes/UpdateTweetDto.html":{}}}],["partialtype(createuserdto",{"_index":605,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pas",{"_index":409,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["passe",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["passport",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{}}}],["patch",{"_index":391,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permet",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["personnes",{"_index":238,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["pipetransform",{"_index":394,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":764,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":736,"title":{},"body":{"index.html":{}}}],["post",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["post(':id/comments",{"_index":453,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["post('auth/login",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["pour",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["prefix",{"_index":521,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":745,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":722,"title":{},"body":{"index.html":{}}}],["project",{"_index":756,"title":{},"body":{"index.html":{}}}],["promise",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":256,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["prop({type",{"_index":564,"title":{},"body":{"classes/TweetResponseDto.html":{}}}],["properties",{"_index":213,"title":{"properties.html":{}},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{}}}],["que",{"_index":246,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["qui",{"_index":239,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["ra",{"_index":331,"title":{},"body":{"classes/CreateTweetDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["rah",{"_index":330,"title":{},"body":{"classes/CreateTweetDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["read",{"_index":765,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":526,"title":{},"body":{"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":463,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":496,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":497,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":734,"title":{},"body":{"index.html":{}}}],["req",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{}}}],["request.user.username",{"_index":419,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["required",{"_index":270,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["reset",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":490,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["response[0",{"_index":592,"title":{},"body":{"injectables/TweetService.html":{}}}],["result",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retourne",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["retourner",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["roles",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["run",{"_index":740,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["récoltés",{"_index":249,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["récupère",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["récupér",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["récupération",{"_index":422,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["récupérée",{"_index":435,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["saltorrounds",{"_index":476,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["sauf",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":727,"title":{},"body":{"index.html":{}}}],["schema",{"_index":257,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/Tweet.html":{},"modules/TweetModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":258,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/Tweet.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(author",{"_index":284,"title":{},"body":{"classes/Author.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(comment",{"_index":306,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tweet",{"_index":520,"title":{},"body":{"classes/Tweet.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":618,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":728,"title":{},"body":{"index.html":{}}}],["service",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":599,"title":{},"body":{"injectables/TweetService.html":{}}}],["si",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":729,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["son",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["sont",{"_index":426,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"modules/CoreModule.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":759,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../author.entity.ts",{"_index":789,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../comment.entity.ts",{"_index":790,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../env.helper.ts",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tweet.entity.ts",{"_index":791,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":792,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:25",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/auth/auth.module.ts",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/core/auth/auth.service.ts",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/core/auth/auth.service.ts:17",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/auth.service.ts:33",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/auth.service.ts:8",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/guards/jwt",{"_index":349,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/core/auth/guards/local",{"_index":371,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/core/auth/strategies/jwt.strategy.ts",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/core/auth/strategies/jwt.strategy.ts:14",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/auth/strategies/jwt.strategy.ts:6",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/auth/strategies/local.strategy.ts",{"_index":373,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/core/auth/strategies/local.strategy.ts:14",{"_index":377,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/core/auth/strategies/local.strategy.ts:9",{"_index":375,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/core/core.module.ts",{"_index":310,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/envs/helper/env.helper.ts",{"_index":670,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":672,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/tweet/dto/create",{"_index":313,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"coverage.html":{}}}],["src/tweet/dto/tweet.response.dto.ts",{"_index":557,"title":{},"body":{"classes/TweetResponseDto.html":{},"coverage.html":{}}}],["src/tweet/dto/tweet.response.dto.ts:13",{"_index":559,"title":{},"body":{"classes/TweetResponseDto.html":{}}}],["src/tweet/dto/tweet.response.dto.ts:21",{"_index":562,"title":{},"body":{"classes/TweetResponseDto.html":{}}}],["src/tweet/dto/tweet.response.dto.ts:30",{"_index":561,"title":{},"body":{"classes/TweetResponseDto.html":{}}}],["src/tweet/dto/tweet.response.dto.ts:39",{"_index":563,"title":{},"body":{"classes/TweetResponseDto.html":{}}}],["src/tweet/dto/tweet.response.dto.ts:47",{"_index":560,"title":{},"body":{"classes/TweetResponseDto.html":{}}}],["src/tweet/dto/tweet.response.dto.ts:50",{"_index":565,"title":{},"body":{"classes/TweetResponseDto.html":{}}}],["src/tweet/dto/update",{"_index":600,"title":{},"body":{"classes/UpdateTweetDto.html":{},"coverage.html":{}}}],["src/tweet/entities/author.entity.ts",{"_index":212,"title":{},"body":{"classes/Author.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tweet/entities/author.entity.ts:16",{"_index":226,"title":{},"body":{"classes/Author.html":{}}}],["src/tweet/entities/author.entity.ts:25",{"_index":251,"title":{},"body":{"classes/Author.html":{}}}],["src/tweet/entities/author.entity.ts:34",{"_index":255,"title":{},"body":{"classes/Author.html":{}}}],["src/tweet/entities/author.entity.ts:43",{"_index":232,"title":{},"body":{"classes/Author.html":{}}}],["src/tweet/entities/author.entity.ts:52",{"_index":243,"title":{},"body":{"classes/Author.html":{}}}],["src/tweet/entities/author.entity.ts:61",{"_index":236,"title":{},"body":{"classes/Author.html":{}}}],["src/tweet/entities/author.entity.ts:70",{"_index":222,"title":{},"body":{"classes/Author.html":{}}}],["src/tweet/entities/comment.entity.ts",{"_index":286,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tweet/entities/comment.entity.ts:14",{"_index":289,"title":{},"body":{"classes/Comment.html":{}}}],["src/tweet/entities/comment.entity.ts:22",{"_index":295,"title":{},"body":{"classes/Comment.html":{}}}],["src/tweet/entities/comment.entity.ts:31",{"_index":292,"title":{},"body":{"classes/Comment.html":{}}}],["src/tweet/entities/tweet.entity.ts",{"_index":498,"title":{},"body":{"classes/Tweet.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tweet/entities/tweet.entity.ts:15",{"_index":503,"title":{},"body":{"classes/Tweet.html":{}}}],["src/tweet/entities/tweet.entity.ts:23",{"_index":506,"title":{},"body":{"classes/Tweet.html":{}}}],["src/tweet/entities/tweet.entity.ts:32",{"_index":505,"title":{},"body":{"classes/Tweet.html":{}}}],["src/tweet/entities/tweet.entity.ts:41",{"_index":507,"title":{},"body":{"classes/Tweet.html":{}}}],["src/tweet/entities/tweet.entity.ts:49",{"_index":502,"title":{},"body":{"classes/Tweet.html":{}}}],["src/tweet/tweet.controller.ts",{"_index":384,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"coverage.html":{}}}],["src/tweet/tweet.controller.ts:116",{"_index":544,"title":{},"body":{"controllers/TweetController.html":{}}}],["src/tweet/tweet.controller.ts:132",{"_index":547,"title":{},"body":{"controllers/TweetController.html":{}}}],["src/tweet/tweet.controller.ts:150",{"_index":532,"title":{},"body":{"controllers/TweetController.html":{}}}],["src/tweet/tweet.controller.ts:171",{"_index":550,"title":{},"body":{"controllers/TweetController.html":{}}}],["src/tweet/tweet.controller.ts:27",{"_index":387,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{}}}],["src/tweet/tweet.controller.ts:55",{"_index":536,"title":{},"body":{"controllers/TweetController.html":{}}}],["src/tweet/tweet.controller.ts:99",{"_index":541,"title":{},"body":{"controllers/TweetController.html":{}}}],["src/tweet/tweet.module.ts",{"_index":553,"title":{},"body":{"modules/TweetModule.html":{}}}],["src/tweet/tweet.service.ts",{"_index":566,"title":{},"body":{"injectables/TweetService.html":{},"coverage.html":{}}}],["src/tweet/tweet.service.ts:10",{"_index":568,"title":{},"body":{"injectables/TweetService.html":{}}}],["src/tweet/tweet.service.ts:111",{"_index":570,"title":{},"body":{"injectables/TweetService.html":{}}}],["src/tweet/tweet.service.ts:128",{"_index":575,"title":{},"body":{"injectables/TweetService.html":{}}}],["src/tweet/tweet.service.ts:15",{"_index":571,"title":{},"body":{"injectables/TweetService.html":{}}}],["src/tweet/tweet.service.ts:29",{"_index":572,"title":{},"body":{"injectables/TweetService.html":{}}}],["src/tweet/tweet.service.ts:49",{"_index":573,"title":{},"body":{"injectables/TweetService.html":{}}}],["src/tweet/tweet.service.ts:78",{"_index":574,"title":{},"body":{"injectables/TweetService.html":{}}}],["src/users/dto/create",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":604,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/TweetResponseDto.html":{}}}],["src/users/entities/user.entity.ts",{"_index":606,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":608,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":612,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":614,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":613,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":609,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:61",{"_index":611,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:70",{"_index":610,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:79",{"_index":607,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:112",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:28",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:45",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:79",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:96",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{}}}],["src/users/users.module.ts",{"_index":651,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":466,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":467,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{}}}],["src/users/users.service.ts:23",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:47",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:52",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":741,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":744,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":746,"title":{},"body":{"index.html":{}}}],["started",{"_index":721,"title":{"index.html":{}},"body":{}}],["starter",{"_index":733,"title":{},"body":{"index.html":{}}}],["statements",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":768,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["succès",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["suit",{"_index":247,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["suivent",{"_index":240,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["summary",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":760,"title":{},"body":{"index.html":{},"modules.html":{}}}],["suppression",{"_index":459,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["supprim",{"_index":461,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["supprimé.'})@apibadrequestresponse({description",{"_index":548,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["sur",{"_index":230,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["svg",{"_index":778,"title":{},"body":{"modules.html":{}}}],["t",{"_index":434,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["table",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":749,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":752,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":751,"title":{},"body":{"index.html":{}}}],["tests",{"_index":748,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":758,"title":{},"body":{"index.html":{}}}],["this.author",{"_index":513,"title":{},"body":{"classes/Tweet.html":{}}}],["this.authservice.login(req.user",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateuser(username",{"_index":381,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.avatar",{"_index":275,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["this.comments",{"_index":517,"title":{},"body":{"classes/Tweet.html":{}}}],["this.content",{"_index":515,"title":{},"body":{"classes/Tweet.html":{}}}],["this.date",{"_index":514,"title":{},"body":{"classes/Tweet.html":{}}}],["this.description",{"_index":278,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["this.findone(id",{"_index":595,"title":{},"body":{"injectables/TweetService.html":{}}}],["this.followers",{"_index":280,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["this.following",{"_index":279,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["this.jwtservice.sign(payload",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.liked",{"_index":281,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["this.likes",{"_index":516,"title":{},"body":{"classes/Tweet.html":{}}}],["this.nickname",{"_index":276,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["this.password",{"_index":616,"title":{},"body":{"classes/User.html":{}}}],["this.tweetmodel.aggregate",{"_index":581,"title":{},"body":{"injectables/TweetService.html":{}}}],["this.tweetmodel.create(createtweetdto",{"_index":577,"title":{},"body":{"injectables/TweetService.html":{}}}],["this.tweetmodel.findoneandupdate",{"_index":598,"title":{},"body":{"injectables/TweetService.html":{}}}],["this.tweetservice.addcomment(id",{"_index":458,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["this.tweetservice.create(tweet",{"_index":421,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["this.tweetservice.findall",{"_index":437,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["this.tweetservice.findcommentsinfo(id",{"_index":443,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["this.tweetservice.findone(id",{"_index":450,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["this.tweetservice.finduserinfo(request",{"_index":432,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["this.tweetservice.remove(id",{"_index":464,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["this.usermodel.create(createuserdto",{"_index":482,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":486,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":488,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":491,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["this.username",{"_index":277,"title":{},"body":{"classes/Author.html":{},"classes/User.html":{}}}],["this.usersservice.create(createuserdto",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyusername(username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":382,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["touch",{"_index":769,"title":{},"body":{"index.html":{}}}],["toutes",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["transform",{"_index":385,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"miscellaneous/variables.html":{}}}],["transform(value",{"_index":386,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["transformer",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["tre",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["trop",{"_index":511,"title":{},"body":{"classes/Tweet.html":{},"classes/TweetResponseDto.html":{}}}],["trouv",{"_index":446,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["true",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":481,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["tweet",{"_index":328,"title":{"classes/Tweet.html":{}},"body":{"classes/CreateTweetDto.html":{},"injectables/ParseObjectIdPipe.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"injectables/TweetService.html":{},"coverage.html":{}}}],["tweet'})@apiokresponse({description",{"_index":529,"title":{},"body":{"controllers/TweetController.html":{}}}],["tweet.controller",{"_index":554,"title":{},"body":{"modules/TweetModule.html":{}}}],["tweet.dto",{"_index":398,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{}}}],["tweet.dto.ts",{"_index":324,"title":{},"body":{"classes/CreateTweetDto.html":{},"classes/UpdateTweetDto.html":{},"coverage.html":{}}}],["tweet.dto.ts:14",{"_index":325,"title":{},"body":{"classes/CreateTweetDto.html":{}}}],["tweet.dto.ts:22",{"_index":327,"title":{},"body":{"classes/CreateTweetDto.html":{}}}],["tweet.name",{"_index":556,"title":{},"body":{"modules/TweetModule.html":{}}}],["tweet.service",{"_index":396,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{}}}],["tweet/tweet.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["tweet_user",{"_index":558,"title":{},"body":{"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{}}}],["tweetcontroller",{"_index":411,"title":{"controllers/TweetController.html":{}},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"coverage.html":{}}}],["tweetdocument",{"_index":518,"title":{},"body":{"classes/Tweet.html":{},"injectables/TweetService.html":{},"miscellaneous/typealiases.html":{}}}],["tweetmodel",{"_index":569,"title":{},"body":{"injectables/TweetService.html":{}}}],["tweetmodule",{"_index":77,"title":{"modules/TweetModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TweetModule.html":{},"modules.html":{},"overview.html":{}}}],["tweetresponsedto",{"_index":402,"title":{"classes/TweetResponseDto.html":{}},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"coverage.html":{}}}],["tweets",{"_index":433,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["tweetschema",{"_index":519,"title":{},"body":{"classes/Tweet.html":{},"modules/TweetModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tweetservice",{"_index":395,"title":{"injectables/TweetService.html":{}},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"modules/TweetModule.html":{},"injectables/TweetService.html":{},"coverage.html":{},"overview.html":{}}}],["tweet})@apibadrequestresponse({description",{"_index":530,"title":{},"body":{"controllers/TweetController.html":{}}}],["tweet})@apinotfoundresponse({description",{"_index":545,"title":{},"body":{"controllers/TweetController.html":{}}}],["twitter",{"_index":774,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"classes/TweetResponseDto.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":787,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":399,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/Tweet.html":{},"controllers/TweetController.html":{},"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":389,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["types.objectid(id",{"_index":586,"title":{},"body":{"injectables/TweetService.html":{}}}],["types.objectid.isvalid(value",{"_index":406,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["typescript",{"_index":732,"title":{},"body":{"index.html":{}}}],["un",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["unauthorizedexception",{"_index":379,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":242,"title":{},"body":{"classes/Author.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":539,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["une",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["unique",{"_index":254,"title":{},"body":{"classes/Author.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["unit",{"_index":747,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":786,"title":{},"body":{"properties.html":{}}}],["update",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":493,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updates",{"_index":495,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"injectables/UsersService.html":{}}}],["updatetweetdto",{"_index":593,"title":{"classes/UpdateTweetDto.html":{}},"body":{"injectables/TweetService.html":{},"classes/UpdateTweetDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":470,"title":{"classes/UpdateUserDto.html":{}},"body":{"injectables/ParseObjectIdPipe-1.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uri",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":412,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@apioperation({summary",{"_index":528,"title":{},"body":{"controllers/TweetController.html":{},"controllers/UsersController.html":{}}}],["useguards(undefined)@apioperation({summary",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":54,"title":{"classes/User.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":380,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.name",{"_index":653,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":472,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usermodel",{"_index":474,"title":{},"body":{"injectables/ParseObjectIdPipe-1.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/Author.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseObjectIdPipe-1.html":{},"injectables/TweetService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TweetService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":652,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":617,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":619,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":78,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":155,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["user})@apibadrequestresponse({description",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["utilisateur",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["utilisateurs",{"_index":439,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"controllers/TweetController.html":{}}}],["valeur",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["validate",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":376,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":263,"title":{},"body":{"classes/Author.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTweetDto.html":{},"classes/CreateUserDto.html":{},"classes/Tweet.html":{},"classes/TweetResponseDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["validobjectid",{"_index":405,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{}}}],["value",{"_index":388,"title":{},"body":{"injectables/ParseObjectIdPipe.html":{},"injectables/ParseObjectIdPipe-1.html":{},"controllers/TweetController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{}}}],["variables",{"_index":793,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":784,"title":{},"body":{"properties.html":{}}}],["vie",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["watch",{"_index":742,"title":{},"body":{"index.html":{}}}],["website",{"_index":772,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":223,"title":{},"body":{"classes/Author.html":{},"classes/Tweet.html":{},"classes/User.html":{}}}],["you'd",{"_index":762,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/TweetModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@ApiOperation({summary: 'Connexion d'un utilisateur en base de données'})@ApiOkResponse({description: 'Utilisateur connecté avec succès.', type: User})@ApiBadRequestResponse({description: 'Erreur dans la connexion.', type: BadRequestException})@Post('auth/login')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBadRequestResponse, ApiCreatedResponse, ApiOkResponse, ApiOperation } from '@nestjs/swagger';\nimport { AuthService } from './core/auth/auth.service';\nimport { User } from './users/entities/user.entity';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly authService: AuthService) {}\n\n\n  @UseGuards(AuthGuard('local'))\n  @ApiOperation({\n    summary: \"Connexion d'un utilisateur en base de données\",\n  })\n  @ApiOkResponse({\n    description: 'Utilisateur connecté avec succès.',\n    type: User,\n  })\n  @ApiBadRequestResponse({\n    description: \"Erreur dans la connexion.\",\n    type: BadRequestException,\n  })\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nTweetModule\n\nTweetModule\n\nAppModule -->\n\nTweetModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CoreModule\n                        \n                        \n                            TweetModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { getEnvPath } from './envs/helper/env.helper';\nimport { TweetModule } from './tweet/tweet.module';\nimport { UsersModule } from './users/users.module';\nimport { CoreModule } from './core/core.module';\nimport { AppController } from './app.controller';\n\nconst envFilePath: string = getEnvPath(`src/envs`);\n\n@Module({\n  imports: [\n    TweetModule,\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        uri: config.get('MONGODB_URI'), // Loaded from .ENV\n        dbName: config.get('dbName'),\n      }),\n    }),\n    ConfigModule.forRoot({ envFilePath, isGlobal: true }),\n    UsersModule,\n    CoreModule,\n  ],\n  controllers: [AppController]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: 'my-secret-key', // Cette valeur doit être caché, (on masquera ça dans une variable d’environnement)\n      signOptions: { expiresIn: '3600s' }, // Durée de vie de notre token JWT\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { User } from 'src/users/entities/user.entity';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n  // On récupère notre service users grâce à l’injection de dépendance\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  // Méthode pour gérer l'authentification\n  // Permet de retourner un user si authentifié\n  async validateUser(\n    username: string,\n    password: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOneByUsername(username);\n    // On compare le mot de passe hashé avec celui fourni dans le formulaire de connexion\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (user && isMatch) {\n      delete user.password;\n      // // on retourne toutes les infos de l'utilisateur sauf le password\n      // const { password, ...result } = user;\n      return user;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { username: user.username };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Author.html":{"url":"classes/Author.html","title":"class - Author","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Author\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/entities/author.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                followers\n                            \n                            \n                                    Optional\n                                following\n                            \n                            \n                                    Optional\n                                liked\n                            \n                            \n                                nickname\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(avatar: string, nickname: string, username: string, description?: string, following?: ObjectId[], followers?: number, liked?: number)\n                    \n                \n                        \n                            \n                                Defined in src/tweet/entities/author.entity.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        avatar\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nickname\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        following\n                                                  \n                                                        \n                                                                    ObjectId[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        followers\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        liked\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Prop({default: 'https://pbs.twimg.com/profile_images/1143032401108578305/8IYSjofV_400x400.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/author.entity.ts:16\n                        \n                    \n\n            \n                \n                    L'avatar de l'utilisateur'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Prop({default: 'Nouveau sur Gazouilleur'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/author.entity.ts:43\n                        \n                    \n\n            \n                \n                    La description d'utilisateur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Prop({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/author.entity.ts:61\n                        \n                    \n\n            \n                \n                    Le nombre personnes qui suivent l'utilisateur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/author.entity.ts:52\n                        \n                    \n\n            \n                \n                    La liste des personnes que l'utilisateur suit\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        liked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Prop({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/author.entity.ts:70\n                        \n                    \n\n            \n                \n                    Le nombre de j'aime que l'utilisateur a récoltés\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/author.entity.ts:25\n                        \n                    \n\n            \n                \n                    Le nom de l'auteur'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/author.entity.ts:34\n                        \n                    \n\n            \n                \n                    Le nom d'utilisateur\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\nimport { HydratedDocument, ObjectId } from 'mongoose';\n\n@Schema()\nexport class Author {\n  /**\n   * L'avatar de l'utilisateur'\n   * @example \"https://pbs.twimg.com/profile_images/1143032401108578305/8IYSjofV_400x400.jpg\"\n   */\n   @IsString()\n  @Prop({\n    default:\n      'https://pbs.twimg.com/profile_images/1143032401108578305/8IYSjofV_400x400.jpg',\n  })\n  avatar: string;\n\n  /**\n   * Le nom de l'auteur'\n   * @example \"Lady Gaga\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  @Prop({ required: true })\n  nickname: string;\n\n  /**\n   * Le nom d'utilisateur\n   * @example \"@ladygaga\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  /**\n   * La description d'utilisateur\n   * @example \"Nouveau sur Gazouilleur\"\n   */\n   @IsString()\n   @IsOptional()\n  @Prop({ default: 'Nouveau sur Gazouilleur' })\n  description?: string;\n\n\n  /**\n   * La liste des personnes que l'utilisateur suit\n   * @example \"[\"3b44424280af93cab4312c3\", \"63b4442c280af93cab4312c5\"]\"\n   */\n   @IsOptional()\n  @Prop({ default: [] })\n  following?: ObjectId[];\n\n  /**\n   * Le nombre personnes qui suivent l'utilisateur\n   * @example 573864923\n   */\n  @IsNumber()\n   @IsOptional()\n  @Prop({ default: 0 })\n  followers?: number;\n\n  /**\n   * Le nombre de j'aime que l'utilisateur a récoltés\n   * @example 573864923\n   */\n   @IsNumber()\n   @IsOptional()\n  @Prop({ default: 0 })\n  liked?: number;\n\n  constructor(avatar: string, nickname: string, username: string, description?: string, following?: ObjectId[], followers?: number, liked?: number) {\n    this.avatar = avatar;\n    this.nickname = nickname;\n    this.username = username;\n    this.description = description;\n    this.following = following;\n    this.followers = followers;\n    this.liked = liked;\n  }\n}\n\nexport type AuthorDocument = HydratedDocument;\nexport const AuthorSchema = SchemaFactory.createForClass(Author);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                content\n                            \n                            \n                                date\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/comment.entity.ts:14\n                        \n                    \n\n            \n                \n                    L'auteur du commentaire'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/comment.entity.ts:31\n                        \n                    \n\n            \n                \n                    Le contenu du commentaire'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@Prop({default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/comment.entity.ts:22\n                        \n                    \n\n            \n                \n                    La date du commentaire'\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { IsDateString, IsNotEmpty, IsString } from 'class-validator';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema()\nexport class Comment {\n  /**\n   * L'auteur du commentaire'\n   * @example \"@beyonce\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  @Prop({ required: true })\n  author: string;\n\n  /**\n   * La date du commentaire'\n   * @example \"2023-01-03T15:05:08.382Z\"\n   */\n  @IsDateString()\n  @Prop({ default: () => new Date().getTime() })\n  date: string;\n\n  /**\n   * Le contenu du commentaire'\n   * @example \"Amazing\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  @Prop({ required: true })\n  content: string;\n}\n\nexport type CommentDocument = HydratedDocument;\nexport const CommentSchema = SchemaFactory.createForClass(Comment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nAuthModule->CoreModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCoreModule -->\n\nUsersModule->CoreModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nCoreModule->AuthModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, AuthModule],\n  exports: [AuthModule],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/dto/create-comment.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/create-comment.dto.ts:14\n                        \n                    \n\n            \n                \n                    L'auteur du commentaire'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/create-comment.dto.ts:22\n                        \n                    \n\n            \n                \n                    Le contenu du commentaire'\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Author } from '../entities/author.entity';\nimport { Comment } from '../entities/comment.entity';\n\nexport class CreateCommentDto\n  implements Omit\n{\n  /**\n   * L'auteur du commentaire'\n   * @example \"@beyonce\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  author: Author['username'];\n\n  /**\n   * Le contenu du commentaire'\n   * @example \"Amazing !\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTweetDto.html":{"url":"classes/CreateTweetDto.html","title":"class - CreateTweetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTweetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/dto/create-tweet.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/create-tweet.dto.ts:14\n                        \n                    \n\n            \n                \n                    L'auteur du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/create-tweet.dto.ts:22\n                        \n                    \n\n            \n                \n                    Le contenu du gazouilli'\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Author } from '../entities/author.entity';\nimport { Tweet } from '../entities/tweet.entity';\n\nexport class CreateTweetDto\n  implements Omit\n{\n  /**\n   * L'auteur du gazouilli'\n   * @example \"@ladygaga\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  author: Author['username'];\n\n  /**\n   * Le contenu du gazouilli'\n   * @example \"Rah rah ra-a-ah\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:13\n                        \n                    \n\n            \n                \n                    Le nom de l'auteur'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    Le nom d'utilisateur\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop } from \"@nestjs/mongoose\";\nimport { IsArray, IsNotEmpty, IsOptional, IsString, MinLength } from \"class-validator\";\nimport { User } from \"../entities/user.entity\";\n\nexport class CreateUserDto implements Omit {\n    /**\n   * Le nom de l'auteur'\n   * @example \"Lady Gaga\"\n   */\n     @IsString()\n     @IsNotEmpty()\n    @Prop({ required: true })\n    nickname: string;\n\n    /**\n     * Le nom d'utilisateur\n     * @example \"@ladygaga\"\n     */\n     @IsString()\n     @IsNotEmpty()\n    @Prop({ required: true, unique: true })\n    username: string;\n\n    @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  roles?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/strategies/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/strategies/jwt.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'my-secret-key',\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/strategies/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { User } from 'src/users/entities/user.entity';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(\n    username: string,\n    password: string,\n  ): Promise> {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseObjectIdPipe.html":{"url":"injectables/ParseObjectIdPipe.html","title":"injectable - ParseObjectIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseObjectIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/tweet.controller.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/tweet/tweet.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Types.ObjectId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  BadRequestException,\n  NotFoundException,\n  Injectable,\n  PipeTransform,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { TweetService } from './tweet.service';\nimport { CreateTweetDto } from './dto/create-tweet.dto';\nimport { ObjectId, Types } from 'mongoose';\nimport { ApiBadRequestResponse, ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation } from '@nestjs/swagger';\nimport { Tweet } from './entities/tweet.entity';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { TweetResponseDto } from './dto/tweet.response.dto';\nimport { JwtAuthGuard } from 'src/core/auth/guards/jwt-auth.guard';\n\n@Injectable()\nexport class ParseObjectIdPipe implements PipeTransform {\n  transform(value: any): Types.ObjectId {\n    const validObjectId = Types.ObjectId.isValid(value);\n\n    if (!validObjectId) {\n      throw new BadRequestException(`L'ID n'est pas de type ObjectId`);\n    }\n\n    return value;\n  }\n}\n\n@Controller('tweets')\nexport class TweetController {\n  constructor(private readonly tweetService: TweetService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Création d'un tweet en base de données\",\n  })\n  @ApiCreatedResponse({\n    description: 'Tweet créé avec succès.',\n    type: Tweet,\n  })\n  @ApiBadRequestResponse({\n    description: 'Erreur dans la création du tweet.',\n    type: BadRequestException,\n  })\n  @Post()\n  create(@Body() createTweetDto: CreateTweetDto, @Request() request){\n    console.log(request.user.username);\n    console.log(createTweetDto)\n    const tweet = {\n      content: createTweetDto.content,\n      author: request.user.username,\n    };\n    console.log(tweet)\n    return this.tweetService.create(tweet);\n  }\n\n  // @ApiOperation({\n  //   summary:\n  //     \"Récupération de l'utilisateur en base de données.\",\n  // })\n  // @ApiOkResponse({\n  //   description: 'Les informations.',\n  //   type: Object,\n  // })\n  // @ApiBadRequestResponse({\n  //   description: 'Les données ne sont pas correctes.',\n  //   type: BadRequestException,\n  // })\n  // @Get('blabla')\n  // findUserInfo(@Param('blabla') @Request() request) {\n  //   if(request?.user) {\n  //     console.log(request.user);\n  //   }\n  //   return this.tweetService.findUserInfo(request);\n  // }\n\n  @ApiOperation({\n    summary:\n      'Récupération des tweets en base de données.',\n  })\n  @ApiOkResponse({\n    description: 'La liste des tweets a été récupérée.',\n    type: [TweetResponseDto],\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Get()\n  findAll() {\n    return this.tweetService.findAll();\n  }\n\n  @ApiOperation({\n    summary:\n      'Récupération des informations des commentaires en base de données.',\n  })\n  @ApiOkResponse({\n    description: 'La liste des utilisateurs a été récupérée.',\n    type: [TweetResponseDto],\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Get(':id/comments')\n  findCommentsInfo(@Param('id', ParseObjectIdPipe) id: ObjectId) {\n    return this.tweetService.findCommentsInfo(id);\n  }\n\n  @ApiOperation({\n    summary: \"Récupération d'un tweet avec id en base de données.\",\n  })\n  @ApiOkResponse({\n    description: 'Le tweet avec cet id a été récupérée.',\n    type: Tweet,\n  })\n  @ApiNotFoundResponse({\n    description: \"Le tweet n'a pas été trouvé.\",\n    type: NotFoundException,\n  })\n  @Get(':id')\n  findOne(@Param('id', ParseObjectIdPipe) id: ObjectId) {\n    console.log('findOne')\n    return this.tweetService.findOne(id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Ajout d'un commentaire à un tweet\",\n  })\n  @ApiOkResponse({\n    description: 'Le tweet avec cet id a été modifié.',\n    type: Tweet,\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Post(':id/comments')\n  addComment(@Param('id', ParseObjectIdPipe) id: ObjectId, @Body() comment: CreateCommentDto, @Request() request) {\n    console.log(comment)\n    const newComment = {\n      author: request.user.username,\n      content: comment.content\n    }\n    return this.tweetService.addComment(id, newComment);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Suppression d'un tweet en base de données.\",\n  })\n  @ApiOkResponse({\n    description: 'Le tweet a bien été supprimé.',\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Delete(':id')\n  remove(@Param('id', ParseObjectIdPipe) id: ObjectId) {\n    return this.tweetService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseObjectIdPipe-1.html":{"url":"injectables/ParseObjectIdPipe-1.html","title":"injectable - ParseObjectIdPipe-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseObjectIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Types.ObjectId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, PipeTransform } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId, Types } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User, UserDocument } from './entities/user.entity';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class ParseObjectIdPipe implements PipeTransform {\n  transform(value: any): Types.ObjectId {\n    const validObjectId = Types.ObjectId.isValid(value);\n\n    if (!validObjectId) {\n      throw new BadRequestException(`L'ID n'est pas de type ObjectId`);\n    }\n\n    return value;\n  }\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const saltOrRounds = 10;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, saltOrRounds);\n    createUserDto.password = hashedPassword;\n    try {\n      return this.userModel.create(createUserDto)\n    } catch (err) {\n      throw new Error(err)\n    }\n  }\n\n  async findAll() {\n    return await this.userModel.find().exec();\n  }\n\n  async findOne(id: ObjectId) {\n    return await this.userModel.findById(id);\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const response = await this.userModel.findOne({ username }).exec();\n    return response;\n  }\n\n  update(id: ObjectId, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: ObjectId) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tweet.html":{"url":"classes/Tweet.html","title":"class - Tweet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tweet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/entities/tweet.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                    Optional\n                                comments\n                            \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                    Optional\n                                likes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(author: string, date: Date, content: string, likes?: number, comments?: Comment[])\n                    \n                \n                        \n                            \n                                Defined in src/tweet/entities/tweet.entity.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        date\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        likes\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        comments\n                                                  \n                                                        \n                                                                        Comment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/tweet.entity.ts:15\n                        \n                    \n\n            \n                \n                    L'auteur du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Prop({type: () => , default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/tweet.entity.ts:49\n                        \n                    \n\n            \n                \n                    Les commentaires du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/tweet.entity.ts:32\n                        \n                    \n\n            \n                \n                    Le contenu du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@Prop({default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/tweet.entity.ts:23\n                        \n                    \n\n            \n                \n                    La date du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Prop({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/entities/tweet.entity.ts:41\n                        \n                    \n\n            \n                \n                    Le nombre de j'aimes du gazouilli'\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { IsDateString, IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\nimport { HydratedDocument, ObjectId, Types } from 'mongoose';\nimport { Comment } from './comment.entity';\n\n@Schema()\nexport class Tweet {\n  /**\n   * L'auteur du gazouilli'\n   * @example \"@ladygaga\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @Prop({ required: true })\n  author: string;\n\n  /**\n   * La date du gazouilli'\n   * @example \"2023-01-03T15:05:08.382Z\"\n   */\n  @IsDateString()\n  @Prop({ default: () => new Date().getTime() })\n  date: Date;\n\n  /**\n   * Le contenu du gazouilli'\n   * @example \"Rah rah ra-a-ah\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @Prop({ required: true })\n  content: string;\n\n  /**\n   * Le nombre de j'aimes du gazouilli'\n   * @example 678245\n   */\n  @IsNumber()\n  @IsOptional()\n  @Prop({ default: 0 })\n  likes?: number;\n\n  /**\n   * Les commentaires du gazouilli'\n   * @example \"[\"trop bien\",\"j'adore\"]\"\n   */\n  @IsOptional()\n  @Prop({ type: ()  => [Comment], default: [] })\n  comments?: Comment[];\n\n  constructor(author: string, date: Date, content: string, likes?: number, comments?: Comment[]) {\n    this.author = author;\n    this.date = date;\n    this.content = content;\n    this.likes = likes;\n    this.comments = comments;\n  }\n}\n\nexport type TweetDocument = HydratedDocument;\nexport const TweetSchema = SchemaFactory.createForClass(Tweet);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TweetController.html":{"url":"controllers/TweetController.html","title":"controller - TweetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TweetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/tweet.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tweets\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findCommentsInfo\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment(id: ObjectId, comment: CreateCommentDto, request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Ajout d'un commentaire à un tweet'})@ApiOkResponse({description: 'Le tweet avec cet id a été modifié.', type: Tweet})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Post(':id/comments')\n                \n            \n\n            \n                \n                    Defined in src/tweet/tweet.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTweetDto: CreateTweetDto, request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Création d'un tweet en base de données'})@ApiCreatedResponse({description: 'Tweet créé avec succès.', type: Tweet})@ApiBadRequestResponse({description: 'Erreur dans la création du tweet.', type: BadRequestException})@Post()\n                \n            \n\n            \n                \n                    Defined in src/tweet/tweet.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTweetDto\n                                    \n                                                CreateTweetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Récupération des tweets en base de données.'})@ApiOkResponse({description: 'La liste des tweets a été récupérée.', type: undefined})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Get()\n                \n            \n\n            \n                \n                    Defined in src/tweet/tweet.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findCommentsInfo\n                        \n                    \n                \n            \n            \n                \nfindCommentsInfo(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Récupération des informations des commentaires en base de données.'})@ApiOkResponse({description: 'La liste des utilisateurs a été récupérée.', type: undefined})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Get(':id/comments')\n                \n            \n\n            \n                \n                    Defined in src/tweet/tweet.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Récupération d'un tweet avec id en base de données.'})@ApiOkResponse({description: 'Le tweet avec cet id a été récupérée.', type: Tweet})@ApiNotFoundResponse({description: 'Le tweet n'a pas été trouvé.', type: NotFoundException})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tweet/tweet.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Suppression d'un tweet en base de données.'})@ApiOkResponse({description: 'Le tweet a bien été supprimé.'})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tweet/tweet.controller.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  BadRequestException,\n  NotFoundException,\n  Injectable,\n  PipeTransform,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { TweetService } from './tweet.service';\nimport { CreateTweetDto } from './dto/create-tweet.dto';\nimport { ObjectId, Types } from 'mongoose';\nimport { ApiBadRequestResponse, ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation } from '@nestjs/swagger';\nimport { Tweet } from './entities/tweet.entity';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { TweetResponseDto } from './dto/tweet.response.dto';\nimport { JwtAuthGuard } from 'src/core/auth/guards/jwt-auth.guard';\n\n@Injectable()\nexport class ParseObjectIdPipe implements PipeTransform {\n  transform(value: any): Types.ObjectId {\n    const validObjectId = Types.ObjectId.isValid(value);\n\n    if (!validObjectId) {\n      throw new BadRequestException(`L'ID n'est pas de type ObjectId`);\n    }\n\n    return value;\n  }\n}\n\n@Controller('tweets')\nexport class TweetController {\n  constructor(private readonly tweetService: TweetService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Création d'un tweet en base de données\",\n  })\n  @ApiCreatedResponse({\n    description: 'Tweet créé avec succès.',\n    type: Tweet,\n  })\n  @ApiBadRequestResponse({\n    description: 'Erreur dans la création du tweet.',\n    type: BadRequestException,\n  })\n  @Post()\n  create(@Body() createTweetDto: CreateTweetDto, @Request() request){\n    console.log(request.user.username);\n    console.log(createTweetDto)\n    const tweet = {\n      content: createTweetDto.content,\n      author: request.user.username,\n    };\n    console.log(tweet)\n    return this.tweetService.create(tweet);\n  }\n\n  // @ApiOperation({\n  //   summary:\n  //     \"Récupération de l'utilisateur en base de données.\",\n  // })\n  // @ApiOkResponse({\n  //   description: 'Les informations.',\n  //   type: Object,\n  // })\n  // @ApiBadRequestResponse({\n  //   description: 'Les données ne sont pas correctes.',\n  //   type: BadRequestException,\n  // })\n  // @Get('blabla')\n  // findUserInfo(@Param('blabla') @Request() request) {\n  //   if(request?.user) {\n  //     console.log(request.user);\n  //   }\n  //   return this.tweetService.findUserInfo(request);\n  // }\n\n  @ApiOperation({\n    summary:\n      'Récupération des tweets en base de données.',\n  })\n  @ApiOkResponse({\n    description: 'La liste des tweets a été récupérée.',\n    type: [TweetResponseDto],\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Get()\n  findAll() {\n    return this.tweetService.findAll();\n  }\n\n  @ApiOperation({\n    summary:\n      'Récupération des informations des commentaires en base de données.',\n  })\n  @ApiOkResponse({\n    description: 'La liste des utilisateurs a été récupérée.',\n    type: [TweetResponseDto],\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Get(':id/comments')\n  findCommentsInfo(@Param('id', ParseObjectIdPipe) id: ObjectId) {\n    return this.tweetService.findCommentsInfo(id);\n  }\n\n  @ApiOperation({\n    summary: \"Récupération d'un tweet avec id en base de données.\",\n  })\n  @ApiOkResponse({\n    description: 'Le tweet avec cet id a été récupérée.',\n    type: Tweet,\n  })\n  @ApiNotFoundResponse({\n    description: \"Le tweet n'a pas été trouvé.\",\n    type: NotFoundException,\n  })\n  @Get(':id')\n  findOne(@Param('id', ParseObjectIdPipe) id: ObjectId) {\n    console.log('findOne')\n    return this.tweetService.findOne(id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Ajout d'un commentaire à un tweet\",\n  })\n  @ApiOkResponse({\n    description: 'Le tweet avec cet id a été modifié.',\n    type: Tweet,\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Post(':id/comments')\n  addComment(@Param('id', ParseObjectIdPipe) id: ObjectId, @Body() comment: CreateCommentDto, @Request() request) {\n    console.log(comment)\n    const newComment = {\n      author: request.user.username,\n      content: comment.content\n    }\n    return this.tweetService.addComment(id, newComment);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Suppression d'un tweet en base de données.\",\n  })\n  @ApiOkResponse({\n    description: 'Le tweet a bien été supprimé.',\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Delete(':id')\n  remove(@Param('id', ParseObjectIdPipe) id: ObjectId) {\n    return this.tweetService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TweetModule.html":{"url":"modules/TweetModule.html","title":"module - TweetModule","body":"\n                   \n\n\n\n\n    Modules\n    TweetModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TweetModule\n\n\n\ncluster_TweetModule_providers\n\n\n\n\nTweetService\n\nTweetService\n\n\n\nTweetModule\n\nTweetModule\n\nTweetModule -->\n\nTweetService->TweetModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tweet/tweet.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TweetService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TweetController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TweetService } from './tweet.service';\nimport { TweetController } from './tweet.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tweet, TweetSchema } from './entities/tweet.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Tweet.name, schema: TweetSchema }]),\n  ],\n  controllers: [TweetController],\n  providers: [TweetService],\n})\nexport class TweetModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TweetResponseDto.html":{"url":"classes/TweetResponseDto.html","title":"class - TweetResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TweetResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/dto/tweet.response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                    Optional\n                                comments\n                            \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                    Optional\n                                likes\n                            \n                            \n                                tweet_user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/tweet.response.dto.ts:13\n                        \n                    \n\n            \n                \n                    L'auteur du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Prop({type: () => , default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/tweet.response.dto.ts:47\n                        \n                    \n\n            \n                \n                    Les commentaires du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/tweet.response.dto.ts:30\n                        \n                    \n\n            \n                \n                    Le contenu du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@Prop({default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/tweet.response.dto.ts:21\n                        \n                    \n\n            \n                \n                    La date du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Prop({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/tweet.response.dto.ts:39\n                        \n                    \n\n            \n                \n                    Le nombre de j'aimes du gazouilli'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tweet_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: () => , default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tweet/dto/tweet.response.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop } from \"@nestjs/mongoose\";\nimport { IsDateString, IsNotEmpty, IsNumber, IsOptional, IsString } from \"class-validator\";\nimport { User } from \"src/users/entities/user.entity\";\n\nexport class TweetResponseDto {\n  /**\n   * L'auteur du gazouilli'\n   * @example \"@ladygaga\"\n   */\n   @IsString()\n   @IsNotEmpty()\n   @Prop({ required: true })\n   author: string;\n\n   /**\n    * La date du gazouilli'\n    * @example \"2023-01-03T15:05:08.382Z\"\n    */\n   @IsDateString()\n   @Prop({ default: () => new Date().getTime() })\n   date: Date;\n\n   /**\n    * Le contenu du gazouilli'\n    * @example \"Rah rah ra-a-ah\"\n    */\n   @IsString()\n   @IsNotEmpty()\n   @Prop({ required: true })\n   content: string;\n\n   /**\n    * Le nombre de j'aimes du gazouilli'\n    * @example 678245\n    */\n   @IsNumber()\n   @IsOptional()\n   @Prop({ default: 0 })\n   likes?: number;\n\n   /**\n    * Les commentaires du gazouilli'\n    * @example \"[\"trop bien\",\"j'adore\"]\"\n    */\n   @IsOptional()\n   @Prop({ type: ()  => [Comment], default: [] })\n   comments?: Comment[];\n\n   @Prop({ type: ()  => [User], default: [] })\n   tweet_user: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TweetService.html":{"url":"injectables/TweetService.html","title":"injectable - TweetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TweetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/tweet.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findCommentsInfo\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tweetModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tweet/tweet.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tweetModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(id: ObjectId, createCommentDto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tweet/tweet.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCommentDto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTweetDto: CreateTweetDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tweet/tweet.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTweetDto\n                                    \n                                                CreateTweetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/tweet/tweet.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommentsInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommentsInfo(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tweet/tweet.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tweet/tweet.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tweet/tweet.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId, Types } from 'mongoose';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { CreateTweetDto } from './dto/create-tweet.dto';\nimport { TweetResponseDto } from './dto/tweet.response.dto';\nimport { Tweet, TweetDocument } from './entities/tweet.entity';\n\n@Injectable()\nexport class TweetService {\n  constructor(\n    @InjectModel(Tweet.name) private tweetModel: Model,\n  ) {}\n\n  create(createTweetDto: CreateTweetDto) {\n    return this.tweetModel.create(createTweetDto);\n  }\n\n  // async findUserInfo(request = '') {\n  //   // console.log(request.user)\n  //   try {\n  //     return request\n  //   } catch (error) {\n  //     throw new Error(error);\n  //   }\n  //   // return request\n  // }\n\n  async findAll(): Promise {\n    try {\n      return await this.tweetModel.aggregate(\n        [\n          {\n            $lookup:\n              {\n                from: \"users\",\n                localField: \"author\",\n                foreignField: \"username\",\n                as: \"tweet_user\"\n              }\n          }\n        ]\n      ).exec();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  async findCommentsInfo(id: ObjectId): Promise {\n    try {\n      const idToFetch = new Types.ObjectId(id as unknown as string)\n      const response =  await this.tweetModel.aggregate(\n        [\n          {\n            $match: {\n              _id: idToFetch\n            }\n          },\n          {\n            $lookup:\n              {\n                from: \"users\",\n                localField: \"comments.author\",\n                foreignField: \"username\",\n                as: \"tweet_user\"\n              },\n          }\n        ]\n      ).exec();\n        console.log(response);\n      if(response.length > 0) return response[0]\n      else throw new Error\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  async findOne(id: ObjectId): Promise {\n    try {\n      const idToFetch = new Types.ObjectId(id as unknown as string)\n      const response =  await this.tweetModel.aggregate(\n        [\n          {\n            $match: {\n              _id: idToFetch\n            }\n          },\n          {\n            $lookup:\n              {\n                from: \"users\",\n                localField: \"author\",\n                foreignField: \"username\",\n                as: \"tweet_user\"\n              },\n          }\n        ]\n      ).exec();\n        console.log(response);\n      if(response.length > 0) return response[0]\n      else throw new Error\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  // update(id: ObjectId, updateTweetDto: UpdateTweetDto) {\n  //   return `This action updates a #${id} tweet`;\n  // }\n\n  async addComment(id: ObjectId, createCommentDto: CreateCommentDto) {\n    const foundTweet = await this.findOne(id);\n    const newComments = [...foundTweet.comments, createCommentDto]\n    const response = await this.tweetModel.findOneAndUpdate(\n      { \"_id\": id },\n      {\n        \"$set\": {\n          \"comments\": newComments\n        }\n      },\n      {\n        new: true,\n      }\n      )\n    return response\n  }\n\n  remove(id: ObjectId) {\n    return `This action removes a #${id} tweet`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTweetDto.html":{"url":"classes/UpdateTweetDto.html","title":"class - UpdateTweetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTweetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tweet/dto/update-tweet.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateTweetDto } from './create-tweet.dto';\n\nexport class UpdateTweetDto extends PartialType(CreateTweetDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                followers\n                            \n                            \n                                    Optional\n                                following\n                            \n                            \n                                    Optional\n                                liked\n                            \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(avatar: string, nickname: string, username: string, password: string, description?: string, following?: ObjectId[], followers?: number, liked?: number)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:79\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        avatar\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nickname\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        following\n                                                  \n                                                        \n                                                                    ObjectId[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        followers\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        liked\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Prop({default: 'https://pbs.twimg.com/profile_images/1143032401108578305/8IYSjofV_400x400.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n            \n                \n                    L'avatar de l'utilisateur'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Prop({default: 'Nouveau sur Gazouilleur'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n            \n                \n                    La description d'utilisateur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Prop({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:70\n                        \n                    \n\n            \n                \n                    Le nombre personnes qui suivent l'utilisateur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:61\n                        \n                    \n\n            \n                \n                    La liste des personnes que l'utilisateur suit\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        liked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Prop({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:79\n                        \n                    \n\n            \n                \n                    Le nombre de j'aime que l'utilisateur a récoltés\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    Le nom de l'auteur'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    Le mot de passe de l'utilisateur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    Le nom d'utilisateur\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\nimport { HydratedDocument, ObjectId } from 'mongoose';\n\n@Schema()\nexport class User {\n  /**\n   * L'avatar de l'utilisateur'\n   * @example \"https://pbs.twimg.com/profile_images/1143032401108578305/8IYSjofV_400x400.jpg\"\n   */\n   @IsString()\n  @Prop({\n    default:\n      'https://pbs.twimg.com/profile_images/1143032401108578305/8IYSjofV_400x400.jpg',\n  })\n  avatar: string;\n\n  /**\n   * Le nom de l'auteur'\n   * @example \"Lady Gaga\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  @Prop({ required: true })\n  nickname: string;\n\n  /**\n   * Le nom d'utilisateur\n   * @example \"@ladygaga\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  /**\n   * Le mot de passe de l'utilisateur\n   * @example \"motdepasse1234\"\n   */\n   @IsString()\n   @IsNotEmpty()\n  @Prop({ required: true })\n  password: string;\n\n  /**\n   * La description d'utilisateur\n   * @example \"Nouveau sur Gazouilleur\"\n   */\n   @IsString()\n   @IsOptional()\n  @Prop({ default: 'Nouveau sur Gazouilleur' })\n  description?: string;\n\n\n  /**\n   * La liste des personnes que l'utilisateur suit\n   * @example \"[\"3b44424280af93cab4312c3\", \"63b4442c280af93cab4312c5\"]\"\n   */\n   @IsOptional()\n  @Prop({ default: [] })\n  following?: ObjectId[];\n\n  /**\n   * Le nombre personnes qui suivent l'utilisateur\n   * @example 573864923\n   */\n  @IsNumber()\n   @IsOptional()\n  @Prop({ default: 0 })\n  followers?: number;\n\n  /**\n   * Le nombre de j'aime que l'utilisateur a récoltés\n   * @example 573864923\n   */\n   @IsNumber()\n   @IsOptional()\n  @Prop({ default: 0 })\n  liked?: number;\n\n  constructor(avatar: string, nickname: string, username: string, password: string, description?: string, following?: ObjectId[], followers?: number, liked?: number) {\n    this.avatar = avatar;\n    this.nickname = nickname;\n    this.username = username;\n    this.password = password;\n    this.description = description;\n    this.following = following;\n    this.followers = followers;\n    this.liked = liked;\n  }\n}\n\nexport type UserDocument = HydratedDocument;\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                findOneByUsername\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Création d'un User en base de données'})@ApiCreatedResponse({description: 'User créé avec succès.', type: User})@ApiBadRequestResponse({description: 'Erreur dans la création du User.', type: BadRequestException})@Post()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Récupération des users en base de données.'})@ApiOkResponse({description: 'La liste des users a été récupérée.', type: undefined})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Récupération d'un utilisateur avec ID en base de données.'})@ApiOkResponse({description: 'L'utilisateur a été récupéré.', type: User})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \nfindOneByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Récupération d'un utilisateur par son nom en base de données.'})@ApiOkResponse({description: 'L'utilisateur a été récupéré.', type: User})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Get(':username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Suppression d'un utilisateur en base de données.'})@ApiOkResponse({description: 'Le utilisateur a bien été supprimé.'})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Modification d'un utilisateur en base de données.'})@ApiOkResponse({description: 'Le utilisateur a bien été modifié.', type: User})@ApiBadRequestResponse({description: 'Les données ne sont pas correctes.', type: BadRequestException})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, BadRequestException } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ObjectId } from 'mongoose';\nimport { JwtAuthGuard } from 'src/core/auth/guards/jwt-auth.guard';\nimport { ApiBadRequestResponse, ApiCreatedResponse, ApiOkResponse, ApiOperation } from '@nestjs/swagger';\nimport { User } from './entities/user.entity';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Création d'un User en base de données\",\n  })\n  @ApiCreatedResponse({\n    description: 'User créé avec succès.',\n    type: User,\n  })\n  @ApiBadRequestResponse({\n    description: 'Erreur dans la création du User.',\n    type: BadRequestException,\n  })\n  @Post()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @ApiOperation({\n    summary:\n      'Récupération des users en base de données.',\n  })\n  @ApiOkResponse({\n    description: 'La liste des users a été récupérée.',\n    type: [User],\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @ApiOperation({\n    summary:\n      \"Récupération d'un utilisateur avec ID en base de données.\",\n  })\n  @ApiOkResponse({\n    description: \"L'utilisateur a été récupéré.\",\n    type: User,\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.usersService.findOne(id);\n  }\n\n  @ApiOperation({\n    summary:\n      \"Récupération d'un utilisateur par son nom en base de données.\",\n  })\n  @ApiOkResponse({\n    description: \"L'utilisateur a été récupéré.\",\n    type: User,\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Get(':username')\n  findOneByUsername(@Param('username') username: string) {\n    return this.usersService.findOneByUsername(username);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Modification d'un utilisateur en base de données.\",\n  })\n  @ApiOkResponse({\n    description: 'Le utilisateur a bien été modifié.',\n    type: User,\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({\n    summary: \"Suppression d'un utilisateur en base de données.\",\n  })\n  @ApiOkResponse({\n    description: 'Le utilisateur a bien été supprimé.',\n  })\n  @ApiBadRequestResponse({\n    description: 'Les données ne sont pas correctes.',\n    type: BadRequestException,\n  })\n  @Delete(':id')\n  remove(@Param('id') id: ObjectId) {\n    return this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './entities/user.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  exports: [UsersService],\n  providers: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, PipeTransform } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId, Types } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User, UserDocument } from './entities/user.entity';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class ParseObjectIdPipe implements PipeTransform {\n  transform(value: any): Types.ObjectId {\n    const validObjectId = Types.ObjectId.isValid(value);\n\n    if (!validObjectId) {\n      throw new BadRequestException(`L'ID n'est pas de type ObjectId`);\n    }\n\n    return value;\n  }\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const saltOrRounds = 10;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, saltOrRounds);\n    createUserDto.password = hashedPassword;\n    try {\n      return this.userModel.create(createUserDto)\n    } catch (err) {\n      throw new Error(err)\n    }\n  }\n\n  async findAll() {\n    return await this.userModel.find().exec();\n  }\n\n  async findOne(id: ObjectId) {\n    return await this.userModel.findById(id);\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const response = await this.userModel.findOne({ username }).exec();\n    return response;\n  }\n\n  update(id: ObjectId, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: ObjectId) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            envFilePath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/envs/helper/env.helper.ts\n            \n            function\n            getEnvPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            applyGlobalConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            validationPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tweet/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/tweet/dto/create-tweet.dto.ts\n            \n            class\n            CreateTweetDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/tweet/dto/tweet.response.dto.ts\n            \n            class\n            TweetResponseDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/tweet/dto/update-tweet.dto.ts\n            \n            class\n            UpdateTweetDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tweet/entities/author.entity.ts\n            \n            class\n            Author\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/tweet/entities/author.entity.ts\n            \n            variable\n            AuthorSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tweet/entities/comment.entity.ts\n            \n            class\n            Comment\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/tweet/entities/comment.entity.ts\n            \n            variable\n            CommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tweet/entities/tweet.entity.ts\n            \n            class\n            Tweet\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/tweet/entities/tweet.entity.ts\n            \n            variable\n            TweetSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tweet/tweet.controller.ts\n            \n            controller\n            TweetController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tweet/tweet.controller.ts\n            \n            injectable\n            ParseObjectIdPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tweet/tweet.service.ts\n            \n            injectable\n            TweetService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            ParseObjectIdPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.2.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mongoose : ^6.8.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getEnvPath   (src/.../env.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/envs/helper/env.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getEnvPath\n                        \n                    \n                \n            \n            \n                \ngetEnvPath(dest: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ pnpm installRunning the app\n# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\n# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TweetModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_TweetModule\n\n\n\ncluster_TweetModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nCoreModule->AuthModule \n\n\n\n\n\nTweetModule\n\nTweetModule\n\nAppModule -->\n\nTweetModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCoreModule -->\n\nUsersModule->CoreModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nCoreModule -->\n\nAuthModule->CoreModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTweetService\n\nTweetService\n\nTweetModule -->\n\nTweetService->TweetModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthorDocument   (src/.../author.entity.ts)\n                        \n                        \n                            CommentDocument   (src/.../comment.entity.ts)\n                        \n                        \n                            TweetDocument   (src/.../tweet.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tweet/entities/author.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AuthorDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/tweet/entities/comment.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CommentDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/tweet/entities/tweet.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TweetDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/users/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyGlobalConfiguration   (src/.../main.ts)\n                        \n                        \n                            AuthorSchema   (src/.../author.entity.ts)\n                        \n                        \n                            CommentSchema   (src/.../comment.entity.ts)\n                        \n                        \n                            envFilePath   (src/.../app.module.ts)\n                        \n                        \n                            TweetSchema   (src/.../tweet.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                        \n                            validationPipe   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        applyGlobalConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    app.useGlobalPipes(validationPipe);\n    app.setGlobalPrefix('api');\n  }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validationPipe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ValidationPipe({\n  transform: true,\n  whitelist: true,\n  })\n                    \n                \n\n\n        \n    \n\n    src/tweet/entities/author.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthorSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Author)\n                    \n                \n\n\n        \n    \n\n    src/tweet/entities/comment.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Comment)\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envFilePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : getEnvPath(`src/envs`)\n                    \n                \n\n\n        \n    \n\n    src/tweet/entities/tweet.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TweetSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tweet)\n                    \n                \n\n\n        \n    \n\n    src/users/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
